1
00:00:24,800 --> 00:00:28,000
so we've been talking about

2
00:00:28,800 --> 00:00:33,440
p and np

3
00:00:30,400 --> 00:00:35,520
and the time complexity classes

4
00:00:33,440 --> 00:00:37,280
and today we're going to shift gear

5
00:00:35,520 --> 00:00:40,559
we're going to talk about uh space

6
00:00:37,280 --> 00:00:42,559
complexity or memory complexity as uh

7
00:00:40,559 --> 00:00:45,520
space complexity is what complexity

8
00:00:42,559 --> 00:00:47,039
theorists uh usually refer

9
00:00:45,520 --> 00:00:48,320
refer to it as

10
00:00:47,039 --> 00:00:49,760
um

11
00:00:48,320 --> 00:00:52,000
and um

12
00:00:49,760 --> 00:00:54,719
you know time and space are the two

13
00:00:52,000 --> 00:00:58,800
basic most basic measures of complexity

14
00:00:54,719 --> 00:01:01,840
that uh that we consider and so um today

15
00:00:58,800 --> 00:01:05,280
we're going to look at the the second of

16
00:01:01,840 --> 00:01:06,880
those two um the space complexity

17
00:01:05,280 --> 00:01:08,080
uh so we will

18
00:01:06,880 --> 00:01:10,000
define

19
00:01:08,080 --> 00:01:12,960
a lot of this is going to be

20
00:01:10,000 --> 00:01:14,479
by analogy with what

21
00:01:12,960 --> 00:01:16,880
we did for time complexity we're going

22
00:01:14,479 --> 00:01:17,680
to define complexity classes we'll talk

23
00:01:16,880 --> 00:01:19,439
about

24
00:01:17,680 --> 00:01:20,960
polynomial space and non-deterministic

25
00:01:19,439 --> 00:01:22,960
polynomial space

26
00:01:20,960 --> 00:01:24,799
um see how those

27
00:01:22,960 --> 00:01:26,400
classes connect up with the time

28
00:01:24,799 --> 00:01:27,520
complexity classes that we've already

29
00:01:26,400 --> 00:01:29,439
defined

30
00:01:27,520 --> 00:01:31,759
and we'll do some examples that will be

31
00:01:29,439 --> 00:01:33,119
setting us up for our

32
00:01:31,759 --> 00:01:35,520
further discussion about space

33
00:01:33,119 --> 00:01:36,799
complexity next week

34
00:01:35,520 --> 00:01:38,880
so

35
00:01:36,799 --> 00:01:42,320
we're going to talk about first of all

36
00:01:38,880 --> 00:01:44,320
what it means for a turing machine

37
00:01:42,320 --> 00:01:46,159
to run in a certain

38
00:01:44,320 --> 00:01:49,360
certain amount of space

39
00:01:46,159 --> 00:01:52,159
and that's simply going to be counting

40
00:01:49,360 --> 00:01:53,200
the number of cells that the turing

41
00:01:52,159 --> 00:01:54,960
machine

42
00:01:53,200 --> 00:01:56,960
scans over

43
00:01:54,960 --> 00:01:59,360
on its tape during the course of its

44
00:01:56,960 --> 00:02:01,759
computation you might be reading that

45
00:01:59,360 --> 00:02:03,680
cell might be writing on that cell but

46
00:02:01,759 --> 00:02:05,840
the total number of cells that it

47
00:02:03,680 --> 00:02:06,880
actually um

48
00:02:05,840 --> 00:02:09,759
visits

49
00:02:06,880 --> 00:02:12,560
um of course visiting the same cell

50
00:02:09,759 --> 00:02:15,599
multiple times only counts once because

51
00:02:12,560 --> 00:02:17,360
space can be reused

52
00:02:15,599 --> 00:02:19,760
but we're going to count the number of

53
00:02:17,360 --> 00:02:21,760
cells that the turing machine visits

54
00:02:19,760 --> 00:02:23,040
during the course of its computation and

55
00:02:21,760 --> 00:02:26,400
then define

56
00:02:23,040 --> 00:02:28,640
the space utilization by analogy with

57
00:02:26,400 --> 00:02:30,640
what we did for time so we'll say a

58
00:02:28,640 --> 00:02:33,200
turing machine runs in a certain amount

59
00:02:30,640 --> 00:02:35,280
of space f n we'll say

60
00:02:33,200 --> 00:02:37,680
if first of all it has to always hold so

61
00:02:35,280 --> 00:02:40,720
all of the machines are deciders

62
00:02:37,680 --> 00:02:45,360
and it uses at most

63
00:02:40,720 --> 00:02:47,920
that much uh tape that much that

64
00:02:45,360 --> 00:02:49,200
it visits that number of cells

65
00:02:47,920 --> 00:02:50,959
on all

66
00:02:49,200 --> 00:02:53,519
inputs of length n

67
00:02:50,959 --> 00:02:56,080
so just like we said for time complexity

68
00:02:53,519 --> 00:02:57,680
the machine has to run within

69
00:02:56,080 --> 00:02:59,200
t of n time

70
00:02:57,680 --> 00:03:01,120
on all inputs

71
00:02:59,200 --> 00:03:03,280
of length n here it's going to have to

72
00:03:01,120 --> 00:03:04,720
use at most f of n

73
00:03:03,280 --> 00:03:07,120
cells

74
00:03:04,720 --> 00:03:11,280
on all inputs of length n in order for

75
00:03:07,120 --> 00:03:11,280
it to be running in space f n

76
00:03:12,319 --> 00:03:17,360
okay a tape cell is simply a little

77
00:03:15,120 --> 00:03:19,840
square of the tape where you can write a

78
00:03:17,360 --> 00:03:19,840
symbol

79
00:03:19,920 --> 00:03:23,360
okay answering a question that good

80
00:03:21,519 --> 00:03:26,000
question that came in from the chat

81
00:03:23,360 --> 00:03:27,760
so um you know

82
00:03:26,000 --> 00:03:29,440
uh

83
00:03:27,760 --> 00:03:31,920
i'm not sure we have i have a

84
00:03:29,440 --> 00:03:33,280
diagram for that but the um in each of

85
00:03:31,920 --> 00:03:36,000
the little squares on the tape are going

86
00:03:33,280 --> 00:03:37,280
to be the tape cells

87
00:03:36,000 --> 00:03:39,360
generally we're going to be sticking to

88
00:03:37,280 --> 00:03:40,959
one tape turing machines but i'll make a

89
00:03:39,360 --> 00:03:43,360
brief remark about multi-tape during

90
00:03:40,959 --> 00:03:45,120
machining shortly

91
00:03:43,360 --> 00:03:46,480
better take cells

92
00:03:45,120 --> 00:03:48,799
sorry

93
00:03:46,480 --> 00:03:50,400
uh on all inputs of length n

94
00:03:48,799 --> 00:03:53,360
uh so return

95
00:03:50,400 --> 00:03:54,720
now okay so that's for deterministic uh

96
00:03:53,360 --> 00:03:56,959
turing machines

97
00:03:54,720 --> 00:04:01,439
for non-deterministic touring machines

98
00:03:56,959 --> 00:04:05,599
we will say uh that it

99
00:04:01,439 --> 00:04:07,040
also runs in a certain amount of space

100
00:04:05,599 --> 00:04:09,040
so for a

101
00:04:07,040 --> 00:04:11,840
non-deterministic machine

102
00:04:09,040 --> 00:04:11,840
it has to

103
00:04:12,000 --> 00:04:15,439
use

104
00:04:14,000 --> 00:04:17,840
at most

105
00:04:15,439 --> 00:04:21,600
that many tape cells

106
00:04:17,840 --> 00:04:24,400
on each branch of its computation

107
00:04:21,600 --> 00:04:27,120
separately you don't add up the total

108
00:04:24,400 --> 00:04:29,040
number of cells used across all of the

109
00:04:27,120 --> 00:04:31,199
branches just like we don't add up the

110
00:04:29,040 --> 00:04:33,440
total amount of time the machine

111
00:04:31,199 --> 00:04:36,639
uses across all of its branches for the

112
00:04:33,440 --> 00:04:37,919
machine to be running in say space n

113
00:04:36,639 --> 00:04:40,479
squared

114
00:04:37,919 --> 00:04:41,440
it has to be using it most n squared

115
00:04:40,479 --> 00:04:44,080
cells

116
00:04:41,440 --> 00:04:46,479
or order n squared cells on each one of

117
00:04:44,080 --> 00:04:48,639
its non-deterministic branches

118
00:04:46,479 --> 00:04:50,000
separately

119
00:04:48,639 --> 00:04:52,000
there might be exponentially many

120
00:04:50,000 --> 00:04:54,080
branches but that's okay

121
00:04:52,000 --> 00:04:56,560
but on each branch it's going to be

122
00:04:54,080 --> 00:04:58,720
using at most n squared or order n

123
00:04:56,560 --> 00:05:01,280
squared cells

124
00:04:58,720 --> 00:05:03,280
importantly though that still the

125
00:05:01,280 --> 00:05:06,400
machine has to be a decider

126
00:05:03,280 --> 00:05:09,440
it's not enough to be looping forever

127
00:05:06,400 --> 00:05:11,440
and using a small amount of space

128
00:05:09,440 --> 00:05:13,759
it could do that but that's not going to

129
00:05:11,440 --> 00:05:15,520
count toward the machine contributing to

130
00:05:13,759 --> 00:05:18,880
its um

131
00:05:15,520 --> 00:05:20,560
space complexity of that language so for

132
00:05:18,880 --> 00:05:23,360
the machine to be running in a certain

133
00:05:20,560 --> 00:05:25,680
amount of space we say that the machine

134
00:05:23,360 --> 00:05:28,479
holds on all of its branches

135
00:05:25,680 --> 00:05:29,600
and each one of its branches uses at

136
00:05:28,479 --> 00:05:32,639
most

137
00:05:29,600 --> 00:05:34,960
that much space okay

138
00:05:32,639 --> 00:05:34,960
again

139
00:05:36,639 --> 00:05:40,400
i can see lots of typos here thank you

140
00:05:39,440 --> 00:05:42,880
um

141
00:05:40,400 --> 00:05:44,320
i messed this all up today

142
00:05:42,880 --> 00:05:47,639
uh

143
00:05:44,320 --> 00:05:47,639
some non-deterministic

144
00:05:52,639 --> 00:05:57,600
good thank you

145
00:05:55,280 --> 00:05:57,600
um

146
00:05:59,199 --> 00:06:04,560
all right so we're going to define the

147
00:06:02,160 --> 00:06:06,800
space complexity classes analogous to

148
00:06:04,560 --> 00:06:09,120
this time complexity classes so these

149
00:06:06,800 --> 00:06:11,039
are languages

150
00:06:09,120 --> 00:06:12,720
that you can do

151
00:06:11,039 --> 00:06:15,680
with machines

152
00:06:12,720 --> 00:06:16,960
that run within that space bound

153
00:06:15,680 --> 00:06:19,759
so

154
00:06:16,960 --> 00:06:20,960
um space f n you can think of space n

155
00:06:19,759 --> 00:06:24,560
squared

156
00:06:20,960 --> 00:06:26,720
um is all of the languages

157
00:06:24,560 --> 00:06:27,680
that a deterministic one tape turing

158
00:06:26,720 --> 00:06:29,360
machine

159
00:06:27,680 --> 00:06:33,120
um can do

160
00:06:29,360 --> 00:06:35,360
within uh can decide within by using in

161
00:06:33,120 --> 00:06:37,759
most n-squared tape cells or order

162
00:06:35,360 --> 00:06:39,520
n-squared tape cells similarly the

163
00:06:37,759 --> 00:06:42,800
non-deterministic space

164
00:06:39,520 --> 00:06:45,199
complexity class are all of the

165
00:06:42,800 --> 00:06:47,600
languages that are non-deterministic one

166
00:06:45,199 --> 00:06:50,479
tape turing machine can decide

167
00:06:47,600 --> 00:06:52,720
running within that amount of space

168
00:06:50,479 --> 00:06:52,720
okay

169
00:06:53,520 --> 00:06:58,000
and lastly

170
00:06:55,120 --> 00:07:00,240
we have a polynomial space

171
00:06:58,000 --> 00:07:02,160
so that's the union over all polynomial

172
00:07:00,240 --> 00:07:04,400
space bounds of the space complexity

173
00:07:02,160 --> 00:07:05,280
class and non-deterministic polynomial

174
00:07:04,400 --> 00:07:06,400
space

175
00:07:05,280 --> 00:07:08,160
it's the same for all of the

176
00:07:06,400 --> 00:07:10,800
non-deterministic

177
00:07:08,160 --> 00:07:12,080
uh polynomial space classes

178
00:07:10,800 --> 00:07:14,639
okay

179
00:07:12,080 --> 00:07:16,160
so i think i do have a check-in on this

180
00:07:14,639 --> 00:07:18,560
um

181
00:07:16,160 --> 00:07:18,560
whoops

182
00:07:18,800 --> 00:07:24,479
which talks about

183
00:07:20,400 --> 00:07:24,479
uh multi-tape turing machines

184
00:07:25,039 --> 00:07:28,560
so we could define

185
00:07:26,639 --> 00:07:30,160
space complexity for multi-tape turing

186
00:07:28,560 --> 00:07:32,880
machines just as we've been doing which

187
00:07:30,160 --> 00:07:34,960
is we did for one tape turning machines

188
00:07:32,880 --> 00:07:38,560
and then define the associated space

189
00:07:34,960 --> 00:07:41,039
complexity classes and then define

190
00:07:38,560 --> 00:07:44,400
the class p space but that would be for

191
00:07:41,039 --> 00:07:46,400
multi-turing machines

192
00:07:44,400 --> 00:07:47,440
now for time

193
00:07:46,400 --> 00:07:50,400
uh

194
00:07:47,440 --> 00:07:51,919
remember that the class p

195
00:07:50,400 --> 00:07:53,440
that you would get from multitape turing

196
00:07:51,919 --> 00:07:56,080
machines is exactly the same as the

197
00:07:53,440 --> 00:07:59,840
class p that we got for one tape turing

198
00:07:56,080 --> 00:08:00,800
machines um that was part of the

199
00:07:59,840 --> 00:08:03,280
nice

200
00:08:00,800 --> 00:08:05,199
quality of the class p it's robust in

201
00:08:03,280 --> 00:08:07,440
that sense a natural so how about for p

202
00:08:05,199 --> 00:08:08,879
space um what do you think do we get the

203
00:08:07,440 --> 00:08:10,000
same class

204
00:08:08,879 --> 00:08:11,440
um

205
00:08:10,000 --> 00:08:12,560
no maybe

206
00:08:11,440 --> 00:08:15,280
or

207
00:08:12,560 --> 00:08:16,720
yes because we can convert a multi-tape

208
00:08:15,280 --> 00:08:18,800
turning machine to a single tape turning

209
00:08:16,720 --> 00:08:19,759
machine by only squaring the amount of

210
00:08:18,800 --> 00:08:21,039
space

211
00:08:19,759 --> 00:08:22,639
um

212
00:08:21,039 --> 00:08:23,759
that was what happened with time as you

213
00:08:22,639 --> 00:08:25,199
remember

214
00:08:23,759 --> 00:08:26,960
or maybe we can do even better

215
00:08:25,199 --> 00:08:29,120
converting a multi-tape touring machine

216
00:08:26,960 --> 00:08:32,080
to single tape only increases it by by

217
00:08:29,120 --> 00:08:34,080
less by say a constant factor here

218
00:08:32,080 --> 00:08:35,919
remember how this is how we're defining

219
00:08:34,080 --> 00:08:38,240
space complexity for multi-tape turing

220
00:08:35,919 --> 00:08:42,159
machines we're taking the sum of all the

221
00:08:38,240 --> 00:08:42,159
cells used on all of the tapes

222
00:08:43,599 --> 00:08:47,600
all right so

223
00:08:45,519 --> 00:08:49,839
let's launch that poll and see what you

224
00:08:47,600 --> 00:08:49,839
think

225
00:08:50,160 --> 00:08:52,839
hopefully this is not

226
00:08:52,160 --> 00:08:55,680
too

227
00:08:52,839 --> 00:08:57,279
hard um

228
00:08:55,680 --> 00:08:59,360
yeah i think most of you have got the

229
00:08:57,279 --> 00:09:01,600
idea though some of you are

230
00:08:59,360 --> 00:09:03,200
i worry sometimes about some of the

231
00:09:01,600 --> 00:09:05,440
answers that i get

232
00:09:03,200 --> 00:09:06,640
i don't know if you're serious or

233
00:09:05,440 --> 00:09:09,839
you're really com

234
00:09:06,640 --> 00:09:09,839
badly confused

235
00:09:10,000 --> 00:09:15,839
but anyway let's

236
00:09:12,160 --> 00:09:15,839
let's wrap this up another

237
00:09:16,320 --> 00:09:19,519
10 seconds or so

238
00:09:21,440 --> 00:09:23,839
let's call

239
00:09:24,560 --> 00:09:27,839
okay i'm gonna end it

240
00:09:30,240 --> 00:09:33,200
yeah i mean i

241
00:09:33,839 --> 00:09:38,160
uh i think

242
00:09:35,600 --> 00:09:41,040
answer b is a reasonable answer in fact

243
00:09:38,160 --> 00:09:43,600
uh answer c is the correct answer uh you

244
00:09:41,040 --> 00:09:46,399
can if you just look at the same

245
00:09:43,600 --> 00:09:48,480
simulation from multi-tape to single

246
00:09:46,399 --> 00:09:50,959
tape

247
00:09:48,480 --> 00:09:53,040
and how much space overhead that

248
00:09:50,959 --> 00:09:55,279
simulation introduces

249
00:09:53,040 --> 00:09:56,640
um it's only linear you're basically

250
00:09:55,279 --> 00:09:59,279
just taking all of the tapes of the

251
00:09:56,640 --> 00:10:00,720
multitape machine and writing them down

252
00:09:59,279 --> 00:10:02,560
next to one another

253
00:10:00,720 --> 00:10:04,399
obviously you know ignoring all the

254
00:10:02,560 --> 00:10:06,000
infinite infinitely many blanks we're

255
00:10:04,399 --> 00:10:07,680
just taking the active portion of the

256
00:10:06,000 --> 00:10:10,160
tapes writing them down next to each

257
00:10:07,680 --> 00:10:11,920
other so the total amount used is just

258
00:10:10,160 --> 00:10:14,399
going to be the sum

259
00:10:11,920 --> 00:10:16,480
on the single tape of what was used on

260
00:10:14,399 --> 00:10:18,560
each of the

261
00:10:16,480 --> 00:10:19,920
individual multitapes in the original

262
00:10:18,560 --> 00:10:24,079
machine

263
00:10:19,920 --> 00:10:25,680
so there's just a linear cost overhead

264
00:10:24,079 --> 00:10:27,920
by converting from multi-tape to single

265
00:10:25,680 --> 00:10:30,800
tape when you're looking at space the

266
00:10:27,920 --> 00:10:32,480
amount of memory that's used

267
00:10:30,800 --> 00:10:35,360
for time remember there was some

268
00:10:32,480 --> 00:10:38,320
additional overhead because we had to be

269
00:10:35,360 --> 00:10:42,720
uh updating um where the virtual heads

270
00:10:38,320 --> 00:10:45,279
were and that uh cost extra time to move

271
00:10:42,720 --> 00:10:46,399
our single head around to do that but

272
00:10:45,279 --> 00:10:48,399
for space

273
00:10:46,399 --> 00:10:50,240
the amount of time that's introduced is

274
00:10:48,399 --> 00:10:53,600
not as irrelevant we're only looking at

275
00:10:50,240 --> 00:10:55,920
the amount of memory and so that's a um

276
00:10:53,600 --> 00:10:59,360
link going to just uh you know

277
00:10:55,920 --> 00:11:00,959
the overhead on that is very low

278
00:10:59,360 --> 00:11:03,600
i would do worry about the folks who are

279
00:11:00,959 --> 00:11:05,360
answering a for example in this uh for

280
00:11:03,600 --> 00:11:06,560
this question you should be

281
00:11:05,360 --> 00:11:08,720
rethinking

282
00:11:06,560 --> 00:11:09,760
what's what what's really going on here

283
00:11:08,720 --> 00:11:12,160
um

284
00:11:09,760 --> 00:11:13,600
uh so

285
00:11:12,160 --> 00:11:14,720
okay

286
00:11:13,600 --> 00:11:15,839
um

287
00:11:14,720 --> 00:11:16,880
now

288
00:11:15,839 --> 00:11:18,079
let us

289
00:11:16,880 --> 00:11:21,279
um

290
00:11:18,079 --> 00:11:23,120
move on here from from that to our next

291
00:11:21,279 --> 00:11:24,000
uh slide

292
00:11:23,120 --> 00:11:25,600
and

293
00:11:24,000 --> 00:11:29,279
compare

294
00:11:25,600 --> 00:11:31,440
uh the time and space complexity classes

295
00:11:29,279 --> 00:11:34,079
you know or time and space complexity

296
00:11:31,440 --> 00:11:36,800
how do they relate to one another

297
00:11:34,079 --> 00:11:38,160
and so first of all we're going to point

298
00:11:36,800 --> 00:11:40,160
out

299
00:11:38,160 --> 00:11:41,040
um

300
00:11:40,160 --> 00:11:43,360
let's

301
00:11:41,040 --> 00:11:44,240
uh start out

302
00:11:43,360 --> 00:11:45,920
here

303
00:11:44,240 --> 00:11:47,920
t of n is going to be represent some

304
00:11:45,920 --> 00:11:50,800
bound either on the time or the amount

305
00:11:47,920 --> 00:11:53,040
of space and generally at least up till

306
00:11:50,800 --> 00:11:54,959
this point um and most of the mostly

307
00:11:53,040 --> 00:11:56,399
going forward though there's going to be

308
00:11:54,959 --> 00:11:58,399
one

309
00:11:56,399 --> 00:12:00,480
variation on that a little later but

310
00:11:58,399 --> 00:12:02,959
we're going to be focusing on

311
00:12:00,480 --> 00:12:05,519
uh bounds which are at least

312
00:12:02,959 --> 00:12:08,399
big enough to either read the input or

313
00:12:05,519 --> 00:12:11,440
at least hold the input that's why we

314
00:12:08,399 --> 00:12:13,440
we refer to t of n being at least n

315
00:12:11,440 --> 00:12:14,959
um

316
00:12:13,440 --> 00:12:16,160
so now if we

317
00:12:14,959 --> 00:12:18,959
look at

318
00:12:16,160 --> 00:12:20,720
uh the time complexity class t of n

319
00:12:18,959 --> 00:12:24,560
think of that t of n like typically

320
00:12:20,720 --> 00:12:26,480
would be say n squared maybe

321
00:12:24,560 --> 00:12:28,880
and the things that you can do

322
00:12:26,480 --> 00:12:32,079
in n squared time

323
00:12:28,880 --> 00:12:34,160
i claim you can also do in n squared

324
00:12:32,079 --> 00:12:35,200
space

325
00:12:34,160 --> 00:12:36,480
um

326
00:12:35,200 --> 00:12:40,000
and basically

327
00:12:36,480 --> 00:12:41,920
um it's just using the very same machine

328
00:12:40,000 --> 00:12:44,639
suppose you have a machine that runs in

329
00:12:41,920 --> 00:12:47,360
n squared time how could it possibly use

330
00:12:44,639 --> 00:12:49,600
say n square n cubed space if it's

331
00:12:47,360 --> 00:12:52,000
running only in n square time

332
00:12:49,600 --> 00:12:54,720
even if it tries to use as much state as

333
00:12:52,000 --> 00:12:56,320
it possibly could as many tape cells as

334
00:12:54,720 --> 00:12:59,040
it possibly could

335
00:12:56,320 --> 00:13:01,600
and you know sending its head cruising

336
00:12:59,040 --> 00:13:04,240
out um into the blind portion of the

337
00:13:01,600 --> 00:13:07,279
tape chewing up as much uh as many tape

338
00:13:04,240 --> 00:13:09,839
cells as it possibly can in in n squared

339
00:13:07,279 --> 00:13:12,720
time it's only going to be able to use n

340
00:13:09,839 --> 00:13:15,360
squared space so the very same machine

341
00:13:12,720 --> 00:13:19,440
that runs in t of n time is also going

342
00:13:15,360 --> 00:13:21,360
to run in t event space um so this

343
00:13:19,440 --> 00:13:25,519
containment here

344
00:13:21,360 --> 00:13:27,519
follows you know really without doing um

345
00:13:25,519 --> 00:13:31,680
any work at all um

346
00:13:27,519 --> 00:13:33,519
so just re restating that here um a

347
00:13:31,680 --> 00:13:36,399
uh turing machine that runs in t of n

348
00:13:33,519 --> 00:13:37,279
steps cannot use more than t of n tape

349
00:13:36,399 --> 00:13:39,279
cells

350
00:13:37,279 --> 00:13:41,519
okay so right now we're focusing on we

351
00:13:39,279 --> 00:13:42,639
could prove some analogous statements

352
00:13:41,519 --> 00:13:45,279
about

353
00:13:42,639 --> 00:13:47,120
non-deterministic complexity um but

354
00:13:45,279 --> 00:13:49,279
let's focus here on the deterministic

355
00:13:47,120 --> 00:13:50,959
complexity

356
00:13:49,279 --> 00:13:52,880
now let's look at going the other

357
00:13:50,959 --> 00:13:53,839
direction suppose we have a turing

358
00:13:52,880 --> 00:13:56,160
machine

359
00:13:53,839 --> 00:13:58,240
that uses t of n

360
00:13:56,160 --> 00:14:00,320
space now

361
00:13:58,240 --> 00:14:02,959
does that immediately imply it's using

362
00:14:00,320 --> 00:14:04,000
only t of n and time

363
00:14:02,959 --> 00:14:06,800
and that's

364
00:14:04,000 --> 00:14:07,600
uh not so clear and in fact probably not

365
00:14:06,800 --> 00:14:08,639
true

366
00:14:07,600 --> 00:14:11,519
because

367
00:14:08,639 --> 00:14:14,000
a space appears to be much more powerful

368
00:14:11,519 --> 00:14:16,320
than time and within a certain amount of

369
00:14:14,000 --> 00:14:19,279
space you can run for much longer than

370
00:14:16,320 --> 00:14:21,920
that same amount of time um so how long

371
00:14:19,279 --> 00:14:21,920
could you run

372
00:14:22,240 --> 00:14:27,680
so what which you can

373
00:14:23,839 --> 00:14:29,760
show is that if you're running uh within

374
00:14:27,680 --> 00:14:30,720
a certain amount of space t event space

375
00:14:29,760 --> 00:14:33,519
let's say

376
00:14:30,720 --> 00:14:35,839
n squared space for example

377
00:14:33,519 --> 00:14:39,040
the amount of time you could use is

378
00:14:35,839 --> 00:14:42,560
going to be exponential in n squared a 2

379
00:14:39,040 --> 00:14:42,560
to the order n squared

380
00:14:43,040 --> 00:14:47,279
sometimes we also write that as

381
00:14:45,760 --> 00:14:50,079
the union of

382
00:14:47,279 --> 00:14:53,120
c to the um n squared by sort of pulling

383
00:14:50,079 --> 00:14:55,360
down that constant here if you want well

384
00:14:53,120 --> 00:14:58,000
it's also just to understand what we

385
00:14:55,360 --> 00:14:59,199
mean by order t of n up in the exponent

386
00:14:58,000 --> 00:15:02,399
it means that

387
00:14:59,199 --> 00:15:03,760
the union over c to the t of n for all c

388
00:15:02,399 --> 00:15:05,440
either of these are just completely

389
00:15:03,760 --> 00:15:06,639
equivalent so whichever one you're more

390
00:15:05,440 --> 00:15:08,880
comfortable with

391
00:15:06,639 --> 00:15:11,839
but why is this going to be true why

392
00:15:08,880 --> 00:15:12,959
does a turing machine that runs in say

393
00:15:11,839 --> 00:15:15,199
um

394
00:15:12,959 --> 00:15:15,199
uh

395
00:15:15,440 --> 00:15:18,480
say n squared space

396
00:15:17,519 --> 00:15:20,000
use

397
00:15:18,480 --> 00:15:21,199
at most

398
00:15:20,000 --> 00:15:22,880
uh

399
00:15:21,199 --> 00:15:26,560
uh

400
00:15:22,880 --> 00:15:28,639
two to the order n squared time

401
00:15:26,560 --> 00:15:31,600
and that's because if you look at how

402
00:15:28,639 --> 00:15:32,959
many possible configurations the machine

403
00:15:31,600 --> 00:15:35,279
can have

404
00:15:32,959 --> 00:15:37,199
remember that a configuration is is

405
00:15:35,279 --> 00:15:39,199
essentially

406
00:15:37,199 --> 00:15:41,519
the contents of the tape this is also

407
00:15:39,199 --> 00:15:43,040
the head position and the state but the

408
00:15:41,519 --> 00:15:44,160
dominant um

409
00:15:43,040 --> 00:15:46,560
uh

410
00:15:44,160 --> 00:15:48,399
the dominant aspect of a configuration

411
00:15:46,560 --> 00:15:51,680
is the tape and so how many different

412
00:15:48,399 --> 00:15:54,079
tape contents can you have

413
00:15:51,680 --> 00:15:56,480
well it's going to be exponential in the

414
00:15:54,079 --> 00:15:58,720
saw in the length of that tape

415
00:15:56,480 --> 00:16:02,079
because you know each cell can have some

416
00:15:58,720 --> 00:16:03,680
fixed number of symbols in it

417
00:16:02,079 --> 00:16:05,839
if a machine

418
00:16:03,680 --> 00:16:10,000
repeats a configuration it's going to go

419
00:16:05,839 --> 00:16:11,759
forever which we're forbidding um in uh

420
00:16:10,000 --> 00:16:13,759
you know in the in these machines

421
00:16:11,759 --> 00:16:15,920
because they're all going to be deciders

422
00:16:13,759 --> 00:16:17,040
so they can only run

423
00:16:15,920 --> 00:16:19,600
um

424
00:16:17,040 --> 00:16:21,519
uh for an amount of time which is

425
00:16:19,600 --> 00:16:23,040
bounded by the number of configurations

426
00:16:21,519 --> 00:16:26,480
that the machine can have

427
00:16:23,040 --> 00:16:26,480
and so the machine can have

428
00:16:27,440 --> 00:16:32,959
you know if it's running in t of n space

429
00:16:30,880 --> 00:16:34,560
then the amount of

430
00:16:32,959 --> 00:16:36,560
time that it could be running is going

431
00:16:34,560 --> 00:16:37,680
to be at most some constant to the t of

432
00:16:36,560 --> 00:16:39,279
n

433
00:16:37,680 --> 00:16:40,880
or two to the order of t events saying

434
00:16:39,279 --> 00:16:42,880
the same thing

435
00:16:40,880 --> 00:16:44,399
uh uh you know unless it's going to

436
00:16:42,880 --> 00:16:46,720
repeat a configuration and end up

437
00:16:44,399 --> 00:16:46,720
looping

438
00:16:47,360 --> 00:16:52,639
okay so these are the two fundamental

439
00:16:50,079 --> 00:16:54,639
connections between time and space

440
00:16:52,639 --> 00:16:57,440
time is contained within the same amount

441
00:16:54,639 --> 00:17:00,880
of space space is contained within that

442
00:16:57,440 --> 00:17:00,880
amount of time exponentiated

443
00:17:02,880 --> 00:17:09,120
okay um so one car reliary of that is

444
00:17:06,799 --> 00:17:11,520
that the class p is contained within p

445
00:17:09,120 --> 00:17:11,520
space

446
00:17:12,799 --> 00:17:16,720
similarly np is going to be contained

447
00:17:14,640 --> 00:17:19,720
within an np space for the very same

448
00:17:16,720 --> 00:17:19,720
reason

449
00:17:20,240 --> 00:17:23,839
um

450
00:17:22,559 --> 00:17:26,000
okay is this

451
00:17:23,839 --> 00:17:27,839
um

452
00:17:26,000 --> 00:17:29,840
understandable

453
00:17:27,839 --> 00:17:32,720
you know this is this is a good place or

454
00:17:29,840 --> 00:17:35,360
in a moment to have one more line to

455
00:17:32,720 --> 00:17:38,559
to to to tell you about but leading into

456
00:17:35,360 --> 00:17:40,720
the next slide so

457
00:17:38,559 --> 00:17:43,600
if you understand the definitions

458
00:17:40,720 --> 00:17:46,320
of what we've done so far

459
00:17:43,600 --> 00:17:48,480
all of the the the this is a this is a

460
00:17:46,320 --> 00:17:51,120
fairly straightforward theorem and the

461
00:17:48,480 --> 00:17:52,559
and the corollary is immediate

462
00:17:51,120 --> 00:17:53,679
okay so

463
00:17:52,559 --> 00:17:55,120
um

464
00:17:53,679 --> 00:17:56,960
anything that you can do in n squared

465
00:17:55,120 --> 00:17:58,480
time you can do an n squared space and

466
00:17:56,960 --> 00:17:59,840
so for if anything you can do in

467
00:17:58,480 --> 00:18:02,000
polynomial time you can also do in

468
00:17:59,840 --> 00:18:04,320
polynomial space

469
00:18:02,000 --> 00:18:06,000
yes c somebody's asking me you know what

470
00:18:04,320 --> 00:18:09,840
is the c c is essentially going to be

471
00:18:06,000 --> 00:18:10,720
the size of the tape alphabet

472
00:18:09,840 --> 00:18:12,240
um

473
00:18:10,720 --> 00:18:13,520
because that's going to govern how many

474
00:18:12,240 --> 00:18:15,919
different configurations you have

475
00:18:13,520 --> 00:18:17,760
there's a slight extra uh factor it's

476
00:18:15,919 --> 00:18:19,760
like you know slight extra factor for

477
00:18:17,760 --> 00:18:22,640
the tape um

478
00:18:19,760 --> 00:18:25,200
the the head location and also the

479
00:18:22,640 --> 00:18:27,200
um state but uh the the main thing is

480
00:18:25,200 --> 00:18:29,120
going to be the

481
00:18:27,200 --> 00:18:31,520
number of tape symbols and the length of

482
00:18:29,120 --> 00:18:31,520
the tape

483
00:18:31,919 --> 00:18:35,919
okay but what's going to come next is

484
00:18:34,160 --> 00:18:38,000
we're going to prove something more

485
00:18:35,919 --> 00:18:40,240
powerful than

486
00:18:38,000 --> 00:18:42,240
this corollary that p is contained in p

487
00:18:40,240 --> 00:18:44,880
space because not only is p contained in

488
00:18:42,240 --> 00:18:46,240
p space but np is also contained in p

489
00:18:44,880 --> 00:18:48,960
space and for that we're going to have

490
00:18:46,240 --> 00:18:48,960
to do more work

491
00:18:54,480 --> 00:18:58,960
so somebody's asking me about the number

492
00:18:56,000 --> 00:19:01,520
of states the number of states

493
00:18:58,960 --> 00:19:04,799
is going to be indep is fixed depend

494
00:19:01,520 --> 00:19:06,080
upon depending on the machine only

495
00:19:04,799 --> 00:19:08,480
so um

496
00:19:06,080 --> 00:19:12,480
they it doesn't depend upon the

497
00:19:08,480 --> 00:19:14,880
uh depend up on n so it could in most

498
00:19:12,480 --> 00:19:15,919
affect

499
00:19:14,880 --> 00:19:17,919
the

500
00:19:15,919 --> 00:19:18,960
number configurations by a constant

501
00:19:17,919 --> 00:19:20,480
factor

502
00:19:18,960 --> 00:19:22,880
and those constant factors are going to

503
00:19:20,480 --> 00:19:25,039
be absorbed

504
00:19:22,880 --> 00:19:27,200
within the definitions of these uh

505
00:19:25,039 --> 00:19:30,000
complexity classes because that's how we

506
00:19:27,200 --> 00:19:31,360
would define them to be um

507
00:19:30,000 --> 00:19:33,600
uh

508
00:19:31,360 --> 00:19:37,559
you know

509
00:19:33,600 --> 00:19:37,559
ignoring the constant factors

510
00:19:40,000 --> 00:19:43,039
but you know

511
00:19:41,039 --> 00:19:44,640
why don't we just take a

512
00:19:43,039 --> 00:19:47,039
you know this may be a good place to

513
00:19:44,640 --> 00:19:49,600
pause for a second and see if there's

514
00:19:47,039 --> 00:19:49,600
any questions

515
00:19:51,039 --> 00:19:55,200
because you know

516
00:19:52,799 --> 00:19:57,679
i think for some of you this may be um

517
00:19:55,200 --> 00:19:59,520
straightforward but you know i i think

518
00:19:57,679 --> 00:20:01,600
it's less common to be measuring

519
00:19:59,520 --> 00:20:03,280
thinking about uh

520
00:20:01,600 --> 00:20:05,679
the amount of memory as a complexity

521
00:20:03,280 --> 00:20:08,240
measure um so this is perhaps a little

522
00:20:05,679 --> 00:20:10,720
less familiar some of you have seen

523
00:20:08,240 --> 00:20:11,600
measuring time and other classes but

524
00:20:10,720 --> 00:20:13,280
remember

525
00:20:11,600 --> 00:20:15,360
measuring the the amount of space that

526
00:20:13,280 --> 00:20:17,360
the algorithm uses probably is a little

527
00:20:15,360 --> 00:20:19,440
less familiar and maybe that's it's

528
00:20:17,360 --> 00:20:22,240
worth spending a moment or two answering

529
00:20:19,440 --> 00:20:22,240
questions about that

530
00:20:28,400 --> 00:20:31,600
so i'm not sure i understand the

531
00:20:29,679 --> 00:20:33,600
question that just came in but i'll i'll

532
00:20:31,600 --> 00:20:35,200
read it out there is it possible that a

533
00:20:33,600 --> 00:20:37,280
turing machine can loop forever

534
00:20:35,200 --> 00:20:40,080
absolutely but a turing machine that

535
00:20:37,280 --> 00:20:42,159
loops forever does not count as one that

536
00:20:40,080 --> 00:20:44,480
runs within the space bound to run

537
00:20:42,159 --> 00:20:46,000
within the space bound the machine must

538
00:20:44,480 --> 00:20:47,760
halt on every input it has to be a

539
00:20:46,000 --> 00:20:49,039
decider we're only considering deciders

540
00:20:47,760 --> 00:20:50,720
here

541
00:20:49,039 --> 00:20:52,480
so is it possible that turn machine can

542
00:20:50,720 --> 00:20:54,400
look forever yes isn't the turing

543
00:20:52,480 --> 00:20:57,840
machine we're talking about a member of

544
00:20:54,400 --> 00:20:57,840
space and thus a decider

545
00:20:58,320 --> 00:21:01,200
um

546
00:20:59,760 --> 00:21:04,159
not totally sure i understand the

547
00:21:01,200 --> 00:21:05,280
question but

548
00:21:04,159 --> 00:21:08,640
if a

549
00:21:05,280 --> 00:21:08,640
turing machine is

550
00:21:08,799 --> 00:21:12,720
not

551
00:21:09,919 --> 00:21:15,280
halting on all inputs it's not a decider

552
00:21:12,720 --> 00:21:17,840
that's our definition

553
00:21:15,280 --> 00:21:17,840
um

554
00:21:18,400 --> 00:21:20,960
are we good and we're not getting very

555
00:21:19,600 --> 00:21:22,320
many questions here so i'm assuming

556
00:21:20,960 --> 00:21:23,440
you're all with me

557
00:21:22,320 --> 00:21:25,919
or

558
00:21:23,440 --> 00:21:27,360
so lost you don't even know what to ask

559
00:21:25,919 --> 00:21:30,880
which is not good

560
00:21:27,360 --> 00:21:33,120
um so be bold if you're confused throw

561
00:21:30,880 --> 00:21:34,960
our question out there because i'm i i

562
00:21:33,120 --> 00:21:36,799
don't want to race through this lecture

563
00:21:34,960 --> 00:21:38,400
since it's it's maybe a little less

564
00:21:36,799 --> 00:21:40,159
familiar to some of you

565
00:21:38,400 --> 00:21:41,280
okay so let's move on

566
00:21:40,159 --> 00:21:43,679
um

567
00:21:41,280 --> 00:21:45,039
as promised i'm going to show you now

568
00:21:43,679 --> 00:21:47,200
that np

569
00:21:45,039 --> 00:21:49,120
not only p as is kind of happens

570
00:21:47,200 --> 00:21:54,080
immediately but np

571
00:21:49,120 --> 00:21:54,080
is contained as a subset of a p space

572
00:21:54,559 --> 00:21:59,039
so that is oh

573
00:21:56,480 --> 00:22:00,880
i didn't get a question i

574
00:21:59,039 --> 00:22:02,640
moved on before i answered this question

575
00:22:00,880 --> 00:22:06,960
can i explain part two of the proof

576
00:22:02,640 --> 00:22:08,320
again part two okay let's just do it um

577
00:22:06,960 --> 00:22:10,080
uh

578
00:22:08,320 --> 00:22:12,080
if something runs in a certain amount of

579
00:22:10,080 --> 00:22:13,600
space you have to just think about how

580
00:22:12,080 --> 00:22:15,600
many different configurations the

581
00:22:13,600 --> 00:22:17,039
machine can have within that amount of

582
00:22:15,600 --> 00:22:20,080
space remember the configurations that

583
00:22:17,039 --> 00:22:20,960
we defined way back at lbas

584
00:22:20,080 --> 00:22:22,480
um

585
00:22:20,960 --> 00:22:24,480
so the number of configurations the

586
00:22:22,480 --> 00:22:26,880
machine can have depends on how much

587
00:22:24,480 --> 00:22:29,520
space it's allocated

588
00:22:26,880 --> 00:22:31,440
like the lbas they had a fixed number of

589
00:22:29,520 --> 00:22:32,480
configurations and we gave a calculation

590
00:22:31,440 --> 00:22:33,520
for that

591
00:22:32,480 --> 00:22:35,679
um

592
00:22:33,520 --> 00:22:37,360
which is basically an exponential in the

593
00:22:35,679 --> 00:22:39,760
amount of space that's how many

594
00:22:37,360 --> 00:22:41,360
configurations the machine can have

595
00:22:39,760 --> 00:22:43,679
so

596
00:22:41,360 --> 00:22:45,679
if the machine is not a is not looping

597
00:22:43,679 --> 00:22:48,000
if it's a decider it can never repeat a

598
00:22:45,679 --> 00:22:49,919
configuration and that's going to tell

599
00:22:48,000 --> 00:22:52,080
us how long the machine can possibly run

600
00:22:49,919 --> 00:22:52,080
for

601
00:22:52,400 --> 00:22:55,679
you know it's a

602
00:22:53,760 --> 00:22:57,679
it's it's it's important to understand

603
00:22:55,679 --> 00:23:00,000
i'm not sure if i knew how to say that

604
00:22:57,679 --> 00:23:02,480
in any way be that different from what i

605
00:23:00,000 --> 00:23:04,400
said before but um

606
00:23:02,480 --> 00:23:06,640
okay getting back now

607
00:23:04,400 --> 00:23:08,880
to proving that np is a subset of p

608
00:23:06,640 --> 00:23:11,520
space so now we're going to have to do

609
00:23:08,880 --> 00:23:12,799
something that's sort of in a way uh

610
00:23:11,520 --> 00:23:15,840
different from what we did on the

611
00:23:12,799 --> 00:23:18,080
previous slide because now

612
00:23:15,840 --> 00:23:20,240
it's not going to be enough to work with

613
00:23:18,080 --> 00:23:22,400
the same machine before when we were

614
00:23:20,240 --> 00:23:24,559
converting we're showing that a certain

615
00:23:22,400 --> 00:23:26,400
amount of time time classes contained

616
00:23:24,559 --> 00:23:28,960
within a spaceclass it was by virtue of

617
00:23:26,400 --> 00:23:30,799
the very same machine by just showing

618
00:23:28,960 --> 00:23:32,559
that if it's running within a certain

619
00:23:30,799 --> 00:23:34,159
amount of time then it has to be running

620
00:23:32,559 --> 00:23:37,039
within that same amount of sp within

621
00:23:34,159 --> 00:23:39,200
that same amount of space um

622
00:23:37,039 --> 00:23:40,559
or in terms of the space it was in the x

623
00:23:39,200 --> 00:23:42,159
given a certain amount of space it has

624
00:23:40,559 --> 00:23:44,960
to be running that same machine within a

625
00:23:42,159 --> 00:23:44,960
certain amount of time

626
00:23:45,200 --> 00:23:48,559
here we're going to mixing

627
00:23:46,640 --> 00:23:50,159
non-determinism and determinism so we're

628
00:23:48,559 --> 00:23:52,760
going to have to take a machine that's

629
00:23:50,159 --> 00:23:54,559
in uh an np type machine a

630
00:23:52,760 --> 00:23:55,440
non-deterministic polynomial time

631
00:23:54,559 --> 00:23:57,279
machine

632
00:23:55,440 --> 00:23:58,799
and convert it into a deterministic

633
00:23:57,279 --> 00:24:00,480
machine that doesn't use a whole lot of

634
00:23:58,799 --> 00:24:02,400
space

635
00:24:00,480 --> 00:24:04,559
so there's

636
00:24:02,400 --> 00:24:06,559
a difference in the

637
00:24:04,559 --> 00:24:09,120
character of this theorem because we

638
00:24:06,559 --> 00:24:10,159
have to introduce a new machine

639
00:24:09,120 --> 00:24:14,159
um

640
00:24:10,159 --> 00:24:14,159
and the way we're going to prove that um

641
00:24:14,320 --> 00:24:19,279
i i'm going to take advantage of some of

642
00:24:16,240 --> 00:24:21,679
the things we've already shown

643
00:24:19,279 --> 00:24:23,520
to prove this one could also prove it a

644
00:24:21,679 --> 00:24:24,720
little bit more directly and maybe it's

645
00:24:23,520 --> 00:24:26,400
worth understanding making sure you

646
00:24:24,720 --> 00:24:30,000
understand both proofs

647
00:24:26,400 --> 00:24:30,000
so the first thing i'm going to observe

648
00:24:30,159 --> 00:24:34,080
is that sat

649
00:24:31,840 --> 00:24:37,279
our np complete language

650
00:24:34,080 --> 00:24:41,360
um the satisfiability language

651
00:24:37,279 --> 00:24:41,360
itself is a member of p space

652
00:24:42,400 --> 00:24:46,640
and the reason for that is

653
00:24:44,240 --> 00:24:48,559
um when you're given

654
00:24:46,640 --> 00:24:51,039
a formula

655
00:24:48,559 --> 00:24:54,200
and now you want to test if that formula

656
00:24:51,039 --> 00:24:54,200
is satisfiable

657
00:24:56,080 --> 00:25:01,440
one way to do it

658
00:24:57,840 --> 00:25:02,799
the most obvious way to do it is try all

659
00:25:01,440 --> 00:25:04,559
assignments

660
00:25:02,799 --> 00:25:06,960
one by one

661
00:25:04,559 --> 00:25:09,440
and see if any of them satisfy the

662
00:25:06,960 --> 00:25:09,440
formula

663
00:25:09,679 --> 00:25:14,640
now that's going to take a lot of time

664
00:25:12,000 --> 00:25:18,400
but how much space does it use

665
00:25:14,640 --> 00:25:21,360
i have in mind reusing the space every

666
00:25:18,400 --> 00:25:22,799
time we try the next assignment

667
00:25:21,360 --> 00:25:25,360
think of going through all of the

668
00:25:22,799 --> 00:25:26,159
assignments the way an odometer would

669
00:25:25,360 --> 00:25:29,039
work

670
00:25:26,159 --> 00:25:30,880
just trying every possible assignment

671
00:25:29,039 --> 00:25:33,679
but reusing the space where you're going

672
00:25:30,880 --> 00:25:34,480
to write that assignment down

673
00:25:33,679 --> 00:25:36,559
um

674
00:25:34,480 --> 00:25:39,760
sort of incrementing it like like a

675
00:25:36,559 --> 00:25:40,960
number um written in binary if you wish

676
00:25:39,760 --> 00:25:42,000
um

677
00:25:40,960 --> 00:25:43,679
going through all the possible

678
00:25:42,000 --> 00:25:45,520
assignments every time you get in the

679
00:25:43,679 --> 00:25:47,360
next assignment you plug it into the

680
00:25:45,520 --> 00:25:49,200
formula and see if the formula is

681
00:25:47,360 --> 00:25:51,200
satisfied if it is then you can accept

682
00:25:49,200 --> 00:25:53,200
immediately if not you go on to the next

683
00:25:51,200 --> 00:25:55,679
assignment and only when you've gone

684
00:25:53,200 --> 00:25:57,520
through all the assignments in that way

685
00:25:55,679 --> 00:25:59,440
and none of them have satisfied the

686
00:25:57,520 --> 00:26:01,120
formula then you can reject so how much

687
00:25:59,440 --> 00:26:02,640
space does that use

688
00:26:01,120 --> 00:26:04,880
that doesn't use a whole lot of space

689
00:26:02,640 --> 00:26:08,320
because you're reusing the space

690
00:26:04,880 --> 00:26:11,039
um to write down one assignment after

691
00:26:08,320 --> 00:26:13,520
the next okay it's only going to be

692
00:26:11,039 --> 00:26:15,120
using an amount of space which is big

693
00:26:13,520 --> 00:26:17,440
enough to hold an assignment which is

694
00:26:15,120 --> 00:26:18,640
basically linear because it's the size

695
00:26:17,440 --> 00:26:20,080
of the number of variables of the

696
00:26:18,640 --> 00:26:22,159
formula so

697
00:26:20,080 --> 00:26:25,120
that's going to be a linear amount of

698
00:26:22,159 --> 00:26:26,720
space to solve the satisfiability

699
00:26:25,120 --> 00:26:30,000
problem and so the satisfiability

700
00:26:26,720 --> 00:26:31,520
problem is certainly in p space

701
00:26:30,000 --> 00:26:34,080
um

702
00:26:31,520 --> 00:26:34,080
step one

703
00:26:34,240 --> 00:26:37,760
step two

704
00:26:35,440 --> 00:26:40,240
is we're going to take advantage

705
00:26:37,760 --> 00:26:44,480
of what we know about reducibility

706
00:26:40,240 --> 00:26:45,520
um so if a is polynomial time reducible

707
00:26:44,480 --> 00:26:47,039
to b

708
00:26:45,520 --> 00:26:49,039
we've already commented we didn't say

709
00:26:47,039 --> 00:26:51,440
this exactly in this way but you know

710
00:26:49,039 --> 00:26:53,200
it's still going to follow that anything

711
00:26:51,440 --> 00:26:55,279
you can do in a certain amount of time

712
00:26:53,200 --> 00:26:58,799
you can also do in that amount of space

713
00:26:55,279 --> 00:27:00,640
because there's a very same machine um

714
00:26:58,799 --> 00:27:04,320
doesn't can't use any more space than

715
00:27:00,640 --> 00:27:06,640
the amount of time it was allocated

716
00:27:04,320 --> 00:27:07,279
so if a is polynomial time reducible to

717
00:27:06,640 --> 00:27:08,559
b

718
00:27:07,279 --> 00:27:11,279
it's also going to be reducible in

719
00:27:08,559 --> 00:27:15,279
polynomial space the a polynomial space

720
00:27:11,279 --> 00:27:15,279
machine could do the reduction

721
00:27:15,760 --> 00:27:20,000
so that means if a

722
00:27:17,600 --> 00:27:22,320
is polynomial time reducible to b and b

723
00:27:20,000 --> 00:27:25,200
is in polynomial space then a is also in

724
00:27:22,320 --> 00:27:25,200
polynomial space

725
00:27:25,520 --> 00:27:29,760
but we know

726
00:27:26,880 --> 00:27:32,480
because satisfiability is np-complete

727
00:27:29,760 --> 00:27:35,120
that every language of np

728
00:27:32,480 --> 00:27:38,559
is reducible to sat so put sat in place

729
00:27:35,120 --> 00:27:40,320
of b every np language is polynomial

730
00:27:38,559 --> 00:27:43,200
time reducible to sat

731
00:27:40,320 --> 00:27:46,399
and we now know that sat is in p space

732
00:27:43,200 --> 00:27:48,159
so therefore every language in np is in

733
00:27:46,399 --> 00:27:51,200
p space because they're all polynomial

734
00:27:48,159 --> 00:27:51,200
time reducible to set

735
00:27:51,919 --> 00:27:57,200
okay so just by using some of the

736
00:27:55,200 --> 00:27:59,120
technology we've developed

737
00:27:57,200 --> 00:28:02,240
namely the notion of completeness sort

738
00:27:59,120 --> 00:28:03,200
of shows us some of its power that if

739
00:28:02,240 --> 00:28:06,159
you want to

740
00:28:03,200 --> 00:28:08,640
conclude something about an entire class

741
00:28:06,159 --> 00:28:10,159
an entire complexity class if you have a

742
00:28:08,640 --> 00:28:12,320
complete problem for that complexity

743
00:28:10,159 --> 00:28:14,080
class often it's enough just to work

744
00:28:12,320 --> 00:28:15,679
with the complete problem and then

745
00:28:14,080 --> 00:28:17,919
everything else by virtue of the

746
00:28:15,679 --> 00:28:19,679
reducibility is going to

747
00:28:17,919 --> 00:28:21,279
inherit the same property it doesn't

748
00:28:19,679 --> 00:28:24,240
work in all cases but in many of the

749
00:28:21,279 --> 00:28:28,240
cases as long as the um you know the

750
00:28:24,240 --> 00:28:29,279
reducibility can be computed by the um

751
00:28:28,240 --> 00:28:30,640
by the

752
00:28:29,279 --> 00:28:34,480
the type of procedure you're working

753
00:28:30,640 --> 00:28:36,399
with um then you can then it follows

754
00:28:34,480 --> 00:28:38,000
uh you know you could also prove this

755
00:28:36,399 --> 00:28:40,640
more directly i think it's in some ways

756
00:28:38,000 --> 00:28:43,440
a little clumsy or a little bit um

757
00:28:40,640 --> 00:28:44,880
less elegant but you can say well let me

758
00:28:43,440 --> 00:28:46,159
just take my

759
00:28:44,880 --> 00:28:49,120
um

760
00:28:46,159 --> 00:28:51,279
uh take a language that's in np it has a

761
00:28:49,120 --> 00:28:52,559
non-deterministic polynomial time

762
00:28:51,279 --> 00:28:55,200
algorithm

763
00:28:52,559 --> 00:28:58,399
and then give a deterministic polynomial

764
00:28:55,200 --> 00:29:00,559
space algorithm simulates that

765
00:28:58,399 --> 00:29:02,720
np algorithm just by going through all

766
00:29:00,559 --> 00:29:04,320
the different branches but making sure

767
00:29:02,720 --> 00:29:06,480
that going through all those different

768
00:29:04,320 --> 00:29:08,240
branches you're reusing the space and

769
00:29:06,480 --> 00:29:09,600
not using new space every time you're

770
00:29:08,240 --> 00:29:11,760
going through a different branch and you

771
00:29:09,600 --> 00:29:13,760
can arrange things if you're just a

772
00:29:11,760 --> 00:29:15,760
little bit careful to do it that way so

773
00:29:13,760 --> 00:29:18,159
you could give a direct simulation in

774
00:29:15,760 --> 00:29:20,080
polynomial space of any

775
00:29:18,159 --> 00:29:22,240
uh np turing machine so that i mean

776
00:29:20,080 --> 00:29:25,600
that's also completely satisfactory but

777
00:29:22,240 --> 00:29:27,840
i think this is a little more elegant

778
00:29:25,600 --> 00:29:29,760
so now let's also this

779
00:29:27,840 --> 00:29:32,159
furthermore is going to allow us to

780
00:29:29,760 --> 00:29:35,600
conclude some additional

781
00:29:32,159 --> 00:29:37,760
languages are in p space

782
00:29:35,600 --> 00:29:39,679
let's define a class we have not yet

783
00:29:37,760 --> 00:29:41,520
seen though maybe you've seen this i

784
00:29:39,679 --> 00:29:43,200
think we've talked about this this

785
00:29:41,520 --> 00:29:44,159
notion of uh

786
00:29:43,200 --> 00:29:46,480
co

787
00:29:44,159 --> 00:29:48,640
before um i think we talked about

788
00:29:46,480 --> 00:29:52,559
co-touring reducib

789
00:29:48,640 --> 00:29:53,600
co touring recognizable um so

790
00:29:52,559 --> 00:29:54,960
uh

791
00:29:53,600 --> 00:29:57,039
the class

792
00:29:54,960 --> 00:29:59,200
those are the class of languages whose

793
00:29:57,039 --> 00:30:01,200
complements are turning recognizable and

794
00:29:59,200 --> 00:30:03,360
the same for co and p

795
00:30:01,200 --> 00:30:07,320
this is the class of languages whose

796
00:30:03,360 --> 00:30:07,320
complements are in np

797
00:30:08,080 --> 00:30:11,600
so you take the complement of every

798
00:30:09,600 --> 00:30:13,760
language that's in np and now you get

799
00:30:11,600 --> 00:30:14,880
all the languages that are in this class

800
00:30:13,760 --> 00:30:16,799
co np

801
00:30:14,880 --> 00:30:18,960
complement of np

802
00:30:16,799 --> 00:30:20,880
um

803
00:30:18,960 --> 00:30:23,760
so for example the complement of the

804
00:30:20,880 --> 00:30:25,360
hand handpath problem so all the graphs

805
00:30:23,760 --> 00:30:27,679
which don't have

806
00:30:25,360 --> 00:30:31,520
hamiltonian paths from uh you know

807
00:30:27,679 --> 00:30:34,720
esthetic so the the the non-hamiltonian

808
00:30:31,520 --> 00:30:36,240
uh graph uh the non-hamiltonian path

809
00:30:34,720 --> 00:30:38,880
problem

810
00:30:36,240 --> 00:30:41,039
that's a cohen p problem

811
00:30:38,880 --> 00:30:42,880
um well here's a language we haven't

812
00:30:41,039 --> 00:30:45,360
i'm not going to define

813
00:30:42,880 --> 00:30:48,880
uh as in terms of its complement it's a

814
00:30:45,360 --> 00:30:50,799
the tautology problem so these are the

815
00:30:48,880 --> 00:30:53,200
problem language

816
00:30:50,799 --> 00:30:56,399
these are all formulas or these are the

817
00:30:53,200 --> 00:30:58,480
formulas where all assignments satisfy

818
00:30:56,399 --> 00:31:00,880
the formula all assignments make the

819
00:30:58,480 --> 00:31:03,679
formula true

820
00:31:00,880 --> 00:31:06,320
um so a tautology is a statement that's

821
00:31:03,679 --> 00:31:06,320
always true

822
00:31:07,039 --> 00:31:11,200
so

823
00:31:08,080 --> 00:31:12,399
no matter how you plug in the variables

824
00:31:11,200 --> 00:31:15,120
so

825
00:31:12,399 --> 00:31:17,039
the the tautology tautology language is

826
00:31:15,120 --> 00:31:19,279
in co-np

827
00:31:17,039 --> 00:31:21,760
um because it's complement which is the

828
00:31:19,279 --> 00:31:23,840
non-tautologies those are the

829
00:31:21,760 --> 00:31:25,919
formulas for which

830
00:31:23,840 --> 00:31:27,760
um there's some assignment which makes

831
00:31:25,919 --> 00:31:29,279
it false so that's going to be clearly

832
00:31:27,760 --> 00:31:33,919
an np language

833
00:31:29,279 --> 00:31:35,039
so tautology is a co and p language

834
00:31:33,919 --> 00:31:37,279
okay

835
00:31:35,039 --> 00:31:37,279
um

836
00:31:37,679 --> 00:31:41,519
now one thing that we

837
00:31:39,120 --> 00:31:43,600
get immediately from the theorem as a

838
00:31:41,519 --> 00:31:46,399
corollary really should write this as a

839
00:31:43,600 --> 00:31:50,000
corollary is that cohen p

840
00:31:46,399 --> 00:31:52,080
is also a subset of p space

841
00:31:50,000 --> 00:31:53,519
and the reason for that is and this is

842
00:31:52,080 --> 00:31:55,440
something that

843
00:31:53,519 --> 00:31:56,880
you know it's um

844
00:31:55,440 --> 00:31:59,200
again

845
00:31:56,880 --> 00:32:00,559
easy but make sure you understand it

846
00:31:59,200 --> 00:32:02,799
is that

847
00:32:00,559 --> 00:32:04,000
p space itself is closed under

848
00:32:02,799 --> 00:32:06,159
complement

849
00:32:04,000 --> 00:32:08,159
because it is

850
00:32:06,159 --> 00:32:10,480
defined in terms of deterministic

851
00:32:08,159 --> 00:32:12,799
machines and deterministic machines you

852
00:32:10,480 --> 00:32:14,480
can always flip the answer

853
00:32:12,799 --> 00:32:16,320
and get a machine

854
00:32:14,480 --> 00:32:18,320
of the same type

855
00:32:16,320 --> 00:32:19,279
which um

856
00:32:18,320 --> 00:32:20,880
uh

857
00:32:19,279 --> 00:32:23,120
uh will decide the complementary

858
00:32:20,880 --> 00:32:25,840
language

859
00:32:23,120 --> 00:32:28,799
so for deterministic machines

860
00:32:25,840 --> 00:32:31,279
deterministic deciders i should say um

861
00:32:28,799 --> 00:32:32,559
you can always flip the answer

862
00:32:31,279 --> 00:32:34,880
um

863
00:32:32,559 --> 00:32:34,880
now

864
00:32:35,679 --> 00:32:38,960
so here we have anything that's in p

865
00:32:37,760 --> 00:32:42,240
space

866
00:32:38,960 --> 00:32:45,120
it has a deterministic polynomial time a

867
00:32:42,240 --> 00:32:46,559
polynomial space uh machine and so its

868
00:32:45,120 --> 00:32:48,720
complementary line which is also going

869
00:32:46,559 --> 00:32:51,919
to be in p space so p space and cos base

870
00:32:48,720 --> 00:32:53,919
p co p space are equal and so that's why

871
00:32:51,919 --> 00:32:56,480
coen p

872
00:32:53,919 --> 00:32:59,600
uh is going to be in p space it's going

873
00:32:56,480 --> 00:33:01,840
to be a subset of p space

874
00:32:59,600 --> 00:33:03,919
okay i hope that's

875
00:33:01,840 --> 00:33:05,600
not getting mixed up by all of the

876
00:33:03,919 --> 00:33:08,159
different uh

877
00:33:05,600 --> 00:33:08,960
alphabet soup here but um

878
00:33:08,159 --> 00:33:10,559
uh

879
00:33:08,960 --> 00:33:14,000
here is maybe a picture maybe that'll be

880
00:33:10,559 --> 00:33:17,440
helpful uh of how the world looks for

881
00:33:14,000 --> 00:33:19,279
the time and spice uh complexity classes

882
00:33:17,440 --> 00:33:20,799
um so far

883
00:33:19,279 --> 00:33:22,399
uh so

884
00:33:20,799 --> 00:33:24,799
we have p

885
00:33:22,399 --> 00:33:27,200
is a subset of np it's also a subset of

886
00:33:24,799 --> 00:33:28,480
co np

887
00:33:27,200 --> 00:33:30,640
um

888
00:33:28,480 --> 00:33:32,799
again for the same reason that p and co

889
00:33:30,640 --> 00:33:34,880
p are equal we never never even really

890
00:33:32,799 --> 00:33:36,960
talk about copy because it's the same as

891
00:33:34,880 --> 00:33:36,960
p

892
00:33:37,279 --> 00:33:40,559
um

893
00:33:38,559 --> 00:33:41,919
uh but np and cohen p

894
00:33:40,559 --> 00:33:45,120
that those are two classes where we

895
00:33:41,919 --> 00:33:47,760
don't know whether they're equal or not

896
00:33:45,120 --> 00:33:49,120
uh because an np machine

897
00:33:47,760 --> 00:33:50,480
um

898
00:33:49,120 --> 00:33:52,399
you know you can't necessarily

899
00:33:50,480 --> 00:33:54,399
complement the

900
00:33:52,399 --> 00:33:56,159
behavior of an np machine and end up

901
00:33:54,399 --> 00:33:58,960
with an np machine

902
00:33:56,159 --> 00:34:01,840
so a question how do we know that cohen

903
00:33:58,960 --> 00:34:03,440
p is a complete class of problems i

904
00:34:01,840 --> 00:34:05,600
didn't say that there's anything about

905
00:34:03,440 --> 00:34:07,440
completeness and cohen p is just a

906
00:34:05,600 --> 00:34:09,839
collection of languages i'm not saying

907
00:34:07,440 --> 00:34:12,159
it's anything any particular feature

908
00:34:09,839 --> 00:34:15,119
about it in fact it does have a complete

909
00:34:12,159 --> 00:34:17,599
problem just like np has a complete

910
00:34:15,119 --> 00:34:19,200
complete problem the complements

911
00:34:17,599 --> 00:34:20,159
and i'm not going to prove this right

912
00:34:19,200 --> 00:34:21,359
here but though it's pretty

913
00:34:20,159 --> 00:34:22,960
straightforward

914
00:34:21,359 --> 00:34:24,960
complements of all the np-complete

915
00:34:22,960 --> 00:34:26,079
languages are going to be co-np-complete

916
00:34:24,960 --> 00:34:28,399
languages

917
00:34:26,079 --> 00:34:28,399
um

918
00:34:28,800 --> 00:34:32,079
and um

919
00:34:30,480 --> 00:34:33,040
so

920
00:34:32,079 --> 00:34:36,240
uh

921
00:34:33,040 --> 00:34:37,839
so i'm getting so okay so let's

922
00:34:36,240 --> 00:34:40,240
i will answer some of the questions

923
00:34:37,839 --> 00:34:42,639
about or about

924
00:34:40,240 --> 00:34:44,560
possible alternate worlds this is how we

925
00:34:42,639 --> 00:34:46,560
believe the world looks like

926
00:34:44,560 --> 00:34:48,480
with each one of these regions being

927
00:34:46,560 --> 00:34:49,760
separated from one another including

928
00:34:48,480 --> 00:34:51,760
this little

929
00:34:49,760 --> 00:34:55,040
corner of the world here np and

930
00:34:51,760 --> 00:34:56,800
intersect co-np which is not um there

931
00:34:55,040 --> 00:34:58,320
might be languages in here which are not

932
00:34:56,800 --> 00:35:00,839
in p and we actually believe there are

933
00:34:58,320 --> 00:35:04,079
such languages but again all of this is

934
00:35:00,839 --> 00:35:06,640
conjectural um and even whether p and p

935
00:35:04,079 --> 00:35:08,240
space are the same or different is an un

936
00:35:06,640 --> 00:35:09,599
is an open question

937
00:35:08,240 --> 00:35:12,079
we don't even know the answer to that

938
00:35:09,599 --> 00:35:14,480
which is perhaps even more shocking that

939
00:35:12,079 --> 00:35:16,880
we don't know how to solve pnn

940
00:35:14,480 --> 00:35:18,160
you know proved p different from np that

941
00:35:16,880 --> 00:35:20,000
we don't know how to prove p different

942
00:35:18,160 --> 00:35:21,280
from p space which seems to be a much

943
00:35:20,000 --> 00:35:23,040
bigger class

944
00:35:21,280 --> 00:35:24,560
uh it would be incredible that anything

945
00:35:23,040 --> 00:35:25,839
you can do with a polynomial amount of

946
00:35:24,560 --> 00:35:27,359
space

947
00:35:25,839 --> 00:35:28,560
uh you can also do with a polynomial

948
00:35:27,359 --> 00:35:30,400
amount of time

949
00:35:28,560 --> 00:35:32,000
um but

950
00:35:30,400 --> 00:35:34,560
i don't know how to prove that they're

951
00:35:32,000 --> 00:35:36,240
different and in fact so this is how the

952
00:35:34,560 --> 00:35:38,720
world could look

953
00:35:36,240 --> 00:35:38,720
um

954
00:35:39,119 --> 00:35:42,320
everything could collapse down p could

955
00:35:40,800 --> 00:35:43,760
equal p space

956
00:35:42,320 --> 00:35:44,960
and then all of these classes would be

957
00:35:43,760 --> 00:35:46,000
the same

958
00:35:44,960 --> 00:35:47,520
um

959
00:35:46,000 --> 00:35:49,680
and i should also mention i don't have

960
00:35:47,520 --> 00:35:50,960
this as another diagram here but just to

961
00:35:49,680 --> 00:35:52,400
answer

962
00:35:50,960 --> 00:35:54,960
you know there's also another pos

963
00:35:52,400 --> 00:35:56,640
there's other possibilities for example

964
00:35:54,960 --> 00:35:58,400
um

965
00:35:56,640 --> 00:36:00,640
p could equal np

966
00:35:58,400 --> 00:36:01,920
without it being equal to p space

967
00:36:00,640 --> 00:36:03,839
and then you'd have a different looking

968
00:36:01,920 --> 00:36:07,119
venn diagram here where there'd be just

969
00:36:03,839 --> 00:36:09,280
two classes p np and co np would all be

970
00:36:07,119 --> 00:36:11,040
the same p space would be different

971
00:36:09,280 --> 00:36:12,800
that's possible

972
00:36:11,040 --> 00:36:14,720
at least we have no idea

973
00:36:12,800 --> 00:36:17,680
uh had a head of m

974
00:36:14,720 --> 00:36:19,359
a a lot of these things can collapse in

975
00:36:17,680 --> 00:36:21,839
in various ways

976
00:36:19,359 --> 00:36:23,839
um and you just have to make sure that

977
00:36:21,839 --> 00:36:27,760
you you know there are some collapses

978
00:36:23,839 --> 00:36:29,760
that obviously could not uh occur like p

979
00:36:27,760 --> 00:36:30,960
if p equals np it's also going to equal

980
00:36:29,760 --> 00:36:32,800
cohen p

981
00:36:30,960 --> 00:36:34,960
um so you can't get some there are

982
00:36:32,800 --> 00:36:36,000
obviously some crazy collapses which

983
00:36:34,960 --> 00:36:38,560
could not

984
00:36:36,000 --> 00:36:40,079
uh happen that p collapsing p and np

985
00:36:38,560 --> 00:36:41,760
being the same but different from cohen

986
00:36:40,079 --> 00:36:44,480
b that can't happen

987
00:36:41,760 --> 00:36:44,480
but um

988
00:36:45,119 --> 00:36:51,200
avoiding some obvious contradictory

989
00:36:47,839 --> 00:36:52,880
situations everything else is possible

990
00:36:51,200 --> 00:36:54,400
so somebody said so well here's a

991
00:36:52,880 --> 00:36:55,200
question let me just answer a few of

992
00:36:54,400 --> 00:36:58,000
these

993
00:36:55,200 --> 00:37:00,400
did we use the completeness of co np to

994
00:36:58,000 --> 00:37:03,520
show that cohen p is

995
00:37:00,400 --> 00:37:06,000
a subset of co-p space no we didn't do

996
00:37:03,520 --> 00:37:06,000
it that way

997
00:37:06,400 --> 00:37:12,560
we showed that uh co-np

998
00:37:10,400 --> 00:37:14,800
um

999
00:37:12,560 --> 00:37:14,800
uh

1000
00:37:15,520 --> 00:37:20,079
well let's see didn't we is that fair um

1001
00:37:21,520 --> 00:37:27,599
well i i suppose you know np of subset

1002
00:37:24,880 --> 00:37:29,839
of p space immediately implies because

1003
00:37:27,599 --> 00:37:32,880
he's complementing both sides that cohen

1004
00:37:29,839 --> 00:37:34,640
p is a subset of copy space

1005
00:37:32,880 --> 00:37:37,200
so you don't have to deal with

1006
00:37:34,640 --> 00:37:39,040
the complete problems on the other side

1007
00:37:37,200 --> 00:37:40,400
that's too complicated to get into here

1008
00:37:39,040 --> 00:37:41,920
but you don't you don't need to talk

1009
00:37:40,400 --> 00:37:44,400
about

1010
00:37:41,920 --> 00:37:46,560
co-empty complete problems um though

1011
00:37:44,400 --> 00:37:48,400
again those are very simple to to get

1012
00:37:46,560 --> 00:37:49,520
from np complete problems

1013
00:37:48,400 --> 00:37:52,160
um

1014
00:37:49,520 --> 00:37:52,960
let's see what else is here

1015
00:37:52,160 --> 00:37:55,280
uh

1016
00:37:52,960 --> 00:37:57,200
are there np complete problems that are

1017
00:37:55,280 --> 00:37:59,359
in co-np

1018
00:37:57,200 --> 00:38:01,520
so the answer to that is no

1019
00:37:59,359 --> 00:38:03,839
not as far as well i mean there would be

1020
00:38:01,520 --> 00:38:07,119
if there was an np complete problem in

1021
00:38:03,839 --> 00:38:09,119
co-np then all of np would be in cohen p

1022
00:38:07,119 --> 00:38:11,200
and they would be equal

1023
00:38:09,119 --> 00:38:13,280
so we suspect the np complete problems

1024
00:38:11,200 --> 00:38:15,760
are not in co and p but don't know how

1025
00:38:13,280 --> 00:38:15,760
to prove that

1026
00:38:17,040 --> 00:38:22,240
so why is tautology

1027
00:38:19,280 --> 00:38:24,400
in cohen p so here is tautology sits in

1028
00:38:22,240 --> 00:38:26,880
this class here the reason is that its

1029
00:38:24,400 --> 00:38:28,960
complementary language is an np the

1030
00:38:26,880 --> 00:38:32,160
complement of tautology

1031
00:38:28,960 --> 00:38:33,680
are the languages where there is some

1032
00:38:32,160 --> 00:38:35,760
assignment

1033
00:38:33,680 --> 00:38:37,839
which makes the formula false

1034
00:38:35,760 --> 00:38:39,440
so with a with an np machine you can

1035
00:38:37,839 --> 00:38:41,839
just guess that assignment and check

1036
00:38:39,440 --> 00:38:44,320
that it makes the formula false

1037
00:38:41,839 --> 00:38:46,720
so the complement of tautology

1038
00:38:44,320 --> 00:38:49,280
is an np language and so tautology is a

1039
00:38:46,720 --> 00:38:51,520
co-np language

1040
00:38:49,280 --> 00:38:51,520
um

1041
00:38:52,640 --> 00:38:57,040
okay uh

1042
00:38:54,800 --> 00:38:58,880
so somebody's asking about p space and

1043
00:38:57,040 --> 00:39:02,160
np-space and how do those relate to one

1044
00:38:58,880 --> 00:39:04,240
another so that's looking ahead um to

1045
00:39:02,160 --> 00:39:07,680
what we're going to be doing next week

1046
00:39:04,240 --> 00:39:07,680
but i'll give you a preview

1047
00:39:09,040 --> 00:39:12,960
an old but at the time surprising

1048
00:39:11,280 --> 00:39:15,359
theorem was that

1049
00:39:12,960 --> 00:39:17,200
piece base and np space actually are

1050
00:39:15,359 --> 00:39:18,880
equal

1051
00:39:17,200 --> 00:39:19,839
so there this analogy with time breaks

1052
00:39:18,880 --> 00:39:21,280
down

1053
00:39:19,839 --> 00:39:23,359
so polynomial space and

1054
00:39:21,280 --> 00:39:26,079
non-deterministic polynomial space do

1055
00:39:23,359 --> 00:39:28,480
turn out to be equal

1056
00:39:26,079 --> 00:39:31,760
the most obvious way of proving of

1057
00:39:28,480 --> 00:39:34,400
trying to simulate an np an np space

1058
00:39:31,760 --> 00:39:36,720
machine would be give you an exponential

1059
00:39:34,400 --> 00:39:38,880
deterministic space algorithm uh so

1060
00:39:36,720 --> 00:39:40,240
we'll go through that but there is an

1061
00:39:38,880 --> 00:39:41,680
algorithm which

1062
00:39:40,240 --> 00:39:43,359
collapses

1063
00:39:41,680 --> 00:39:45,520
non-deterministic polynomial space down

1064
00:39:43,359 --> 00:39:48,240
to deterministic polynomial space which

1065
00:39:45,520 --> 00:39:50,480
again at the time was kind of surprising

1066
00:39:48,240 --> 00:39:50,480
uh

1067
00:39:51,280 --> 00:39:54,720
and so last question i'll take here is

1068
00:39:53,119 --> 00:39:57,839
there some equivalent concept to the

1069
00:39:54,720 --> 00:39:59,920
idea of a certificate for co-np

1070
00:39:57,839 --> 00:40:01,920
yes there is a notion of a certificate

1071
00:39:59,920 --> 00:40:04,079
but now it's going to be a certificate

1072
00:40:01,920 --> 00:40:05,520
that you're not in the language instead

1073
00:40:04,079 --> 00:40:07,040
of a certificate that you're in the

1074
00:40:05,520 --> 00:40:08,960
language

1075
00:40:07,040 --> 00:40:11,040
and then again works for the very same

1076
00:40:08,960 --> 00:40:12,880
reason that we had certificates for np

1077
00:40:11,040 --> 00:40:14,480
languages where you had certificate for

1078
00:40:12,880 --> 00:40:16,480
membership for cohenp you have a

1079
00:40:14,480 --> 00:40:18,079
certificate for non-membership i don't

1080
00:40:16,480 --> 00:40:20,319
know if there's no other certificate for

1081
00:40:18,079 --> 00:40:22,400
membership in co mp

1082
00:40:20,319 --> 00:40:25,400
um okay so let's move on

1083
00:40:22,400 --> 00:40:25,400
um

1084
00:40:25,440 --> 00:40:28,640
okay so now we're going to introduce

1085
00:40:27,119 --> 00:40:30,319
we're going to look at some important

1086
00:40:28,640 --> 00:40:32,319
examples these are examples that we're

1087
00:40:30,319 --> 00:40:34,960
going to um i'm going to give you two

1088
00:40:32,319 --> 00:40:36,880
examples first one called tqbf

1089
00:40:34,960 --> 00:40:38,720
and then we're going to have a second

1090
00:40:36,880 --> 00:40:40,240
example both of those

1091
00:40:38,720 --> 00:40:41,599
we're going to

1092
00:40:40,240 --> 00:40:43,200
one of them is going to be an example of

1093
00:40:41,599 --> 00:40:45,200
a problem in

1094
00:40:43,200 --> 00:40:48,720
p space the other one is going to be an

1095
00:40:45,200 --> 00:40:50,000
example of a problem in np space um and

1096
00:40:48,720 --> 00:40:52,000
it's these are going to be important

1097
00:40:50,000 --> 00:40:55,040
languages for us so they're not just

1098
00:40:52,000 --> 00:40:57,280
going to serve as examples for today but

1099
00:40:55,040 --> 00:40:59,839
you know um they're going to be

1100
00:40:57,280 --> 00:41:01,599
useful languages for us later on so just

1101
00:40:59,839 --> 00:41:04,000
keep that in mind as we're going through

1102
00:41:01,599 --> 00:41:04,720
going through it

1103
00:41:04,000 --> 00:41:06,560
so

1104
00:41:04,720 --> 00:41:08,800
to understand tqbf you have to

1105
00:41:06,560 --> 00:41:11,119
understand um

1106
00:41:08,800 --> 00:41:12,400
what are called quantified boolean

1107
00:41:11,119 --> 00:41:15,280
formulas

1108
00:41:12,400 --> 00:41:15,280
or qbfs

1109
00:41:15,839 --> 00:41:18,800
so those are boolean formulas just like

1110
00:41:17,599 --> 00:41:21,280
the ones we've been seeing we've been

1111
00:41:18,800 --> 00:41:24,880
talking about with boolean variables and

1112
00:41:21,280 --> 00:41:26,560
the ands ors and and negated variables

1113
00:41:24,880 --> 00:41:28,240
um but now you're going to add

1114
00:41:26,560 --> 00:41:32,319
quantifiers

1115
00:41:28,240 --> 00:41:34,560
exist quantifiers for all quantifiers

1116
00:41:32,319 --> 00:41:36,640
if you haven't seen quantifiers you you

1117
00:41:34,560 --> 00:41:38,160
need to go back and re you know review

1118
00:41:36,640 --> 00:41:39,520
those um

1119
00:41:38,160 --> 00:41:41,599
you know i think that we already kind of

1120
00:41:39,520 --> 00:41:43,440
introduced talked about them briefly

1121
00:41:41,599 --> 00:41:44,800
earlier in the in the term

1122
00:41:43,440 --> 00:41:46,319
but um

1123
00:41:44,800 --> 00:41:49,119
this is part of the basic math that you

1124
00:41:46,319 --> 00:41:49,119
need to know

1125
00:41:49,440 --> 00:41:52,560
maybe you'll

1126
00:41:50,800 --> 00:41:55,520
not comfortable with them you'll

1127
00:41:52,560 --> 00:41:57,359
pick it up somewhat during the course of

1128
00:41:55,520 --> 00:41:58,480
the today's and the next few lectures

1129
00:41:57,359 --> 00:41:59,520
but anyway

1130
00:41:58,480 --> 00:42:02,480
uh

1131
00:41:59,520 --> 00:42:04,079
so if you have a boolean formula formula

1132
00:42:02,480 --> 00:42:06,640
i'll give you some examples that has

1133
00:42:04,079 --> 00:42:09,359
exist and for all quantifiers one of the

1134
00:42:06,640 --> 00:42:11,280
requirement for it to be a qbf is that

1135
00:42:09,359 --> 00:42:12,720
all of the variables have to be

1136
00:42:11,280 --> 00:42:13,920
within the scope of one of the

1137
00:42:12,720 --> 00:42:15,119
quantifiers

1138
00:42:13,920 --> 00:42:17,520
so you

1139
00:42:15,119 --> 00:42:18,880
all of the variables of the formula have

1140
00:42:17,520 --> 00:42:20,480
to be quantified

1141
00:42:18,880 --> 00:42:22,640
by one of the quantifiers and the we're

1142
00:42:20,480 --> 00:42:24,880
going to assume the quantifiers are in

1143
00:42:22,640 --> 00:42:27,520
front are sort of leading quantifiers in

1144
00:42:24,880 --> 00:42:31,720
front of the rest of the uh

1145
00:42:27,520 --> 00:42:31,720
of the of the rest of the expression

1146
00:42:32,480 --> 00:42:37,440
so because all of the variables have

1147
00:42:35,440 --> 00:42:39,680
been quantified

1148
00:42:37,440 --> 00:42:42,240
then a quantified boolean formula is

1149
00:42:39,680 --> 00:42:46,240
going to be either true or false

1150
00:42:42,240 --> 00:42:48,079
following the meaning of the quantifiers

1151
00:42:46,240 --> 00:42:52,160
um and again some of this may become

1152
00:42:48,079 --> 00:42:52,160
clear as we do some examples uh

1153
00:42:52,960 --> 00:42:56,000
okay

1154
00:42:53,839 --> 00:42:57,680
so here are some examples coming

1155
00:42:56,000 --> 00:42:59,280
so here is one

1156
00:42:57,680 --> 00:43:01,200
here is a qbf

1157
00:42:59,280 --> 00:43:04,400
so all of the variables the which are

1158
00:43:01,200 --> 00:43:05,119
just x and y they both appear in front

1159
00:43:04,400 --> 00:43:06,880
of

1160
00:43:05,119 --> 00:43:09,760
uh next to some quantifier so that's

1161
00:43:06,880 --> 00:43:11,359
going to be that's a requirement uh if

1162
00:43:09,760 --> 00:43:13,839
we have a

1163
00:43:11,359 --> 00:43:13,839
qbf

1164
00:43:14,079 --> 00:43:18,400
and

1165
00:43:15,359 --> 00:43:21,040
so this says for all x there exists a y

1166
00:43:18,400 --> 00:43:22,960
this expression

1167
00:43:21,040 --> 00:43:24,079
holds

1168
00:43:22,960 --> 00:43:25,520
so

1169
00:43:24,079 --> 00:43:26,960
we need to kind of unpack that and

1170
00:43:25,520 --> 00:43:28,400
understand what it means it says for

1171
00:43:26,960 --> 00:43:31,680
every x

1172
00:43:28,400 --> 00:43:34,160
for every for every way of assigning

1173
00:43:31,680 --> 00:43:36,400
a boolean value to x so

1174
00:43:34,160 --> 00:43:37,839
uh x is going to be either true or false

1175
00:43:36,400 --> 00:43:40,720
there exists a way of assigning a

1176
00:43:37,839 --> 00:43:43,440
boolean value for y to make this true

1177
00:43:40,720 --> 00:43:46,640
determined to to make the rest of the

1178
00:43:43,440 --> 00:43:47,920
expression hold true

1179
00:43:46,640 --> 00:43:50,000
um and

1180
00:43:47,920 --> 00:43:52,560
we'll go through that but

1181
00:43:50,000 --> 00:43:54,960
let's let's uh contrast

1182
00:43:52,560 --> 00:43:57,599
that with the second example where i

1183
00:43:54,960 --> 00:44:00,800
invert the order of the quantifiers

1184
00:43:57,599 --> 00:44:00,800
because that's going to be important

1185
00:44:00,960 --> 00:44:04,240
for the meaning of the formula

1186
00:44:04,319 --> 00:44:10,000
so if i say for every x there is a y

1187
00:44:07,200 --> 00:44:13,119
which makes this the rest of it true

1188
00:44:10,000 --> 00:44:15,040
that says well no matter how i set x

1189
00:44:13,119 --> 00:44:16,720
there's going to be a way to set y to

1190
00:44:15,040 --> 00:44:18,880
make this true so that says well if i

1191
00:44:16,720 --> 00:44:21,200
set x to true

1192
00:44:18,880 --> 00:44:23,839
it's got to be some way to set y to make

1193
00:44:21,200 --> 00:44:24,720
to make the the the remaining expression

1194
00:44:23,839 --> 00:44:27,040
hold

1195
00:44:24,720 --> 00:44:29,040
um so if i said x to true what should i

1196
00:44:27,040 --> 00:44:30,319
set y to be

1197
00:44:29,040 --> 00:44:31,119
um

1198
00:44:30,319 --> 00:44:32,560
well

1199
00:44:31,119 --> 00:44:34,960
uh

1200
00:44:32,560 --> 00:44:36,720
if i said x to be true and maybe i said

1201
00:44:34,960 --> 00:44:39,520
y to be true

1202
00:44:36,720 --> 00:44:41,359
well then this this clause is uh

1203
00:44:39,520 --> 00:44:44,160
satisfied but this clause won't be

1204
00:44:41,359 --> 00:44:47,520
satisfied so setting y to be true is not

1205
00:44:44,160 --> 00:44:49,920
it won't work but for every x i'm

1206
00:44:47,520 --> 00:44:52,560
only need to show there exists some y so

1207
00:44:49,920 --> 00:44:54,079
if i pick x to be true i can say y to be

1208
00:44:52,560 --> 00:44:55,200
false

1209
00:44:54,079 --> 00:44:57,359
um

1210
00:44:55,200 --> 00:44:59,680
and now this one is this one holds and

1211
00:44:57,359 --> 00:45:00,960
this one holds and the formula holds but

1212
00:44:59,680 --> 00:45:03,520
i have to make sure that that's going to

1213
00:45:00,960 --> 00:45:04,400
be the case for both settings of x

1214
00:45:03,520 --> 00:45:06,880
because

1215
00:45:04,400 --> 00:45:08,800
i'm saying for all x so if i said x not

1216
00:45:06,880 --> 00:45:11,119
a false because i already showed that it

1217
00:45:08,800 --> 00:45:14,800
works for x equal to true if i set x to

1218
00:45:11,119 --> 00:45:16,640
false if i set now y to be true

1219
00:45:14,800 --> 00:45:18,480
this is going to hold

1220
00:45:16,640 --> 00:45:21,280
so this

1221
00:45:18,480 --> 00:45:22,800
expression is true

1222
00:45:21,280 --> 00:45:25,680
because it is the case that for every

1223
00:45:22,800 --> 00:45:27,520
way to set x there is a way to set y

1224
00:45:25,680 --> 00:45:28,960
so this part holds

1225
00:45:27,520 --> 00:45:30,240
let's look at let's compare that with

1226
00:45:28,960 --> 00:45:33,440
this case

1227
00:45:30,240 --> 00:45:36,640
is there some way to set y

1228
00:45:33,440 --> 00:45:39,280
such that no matter how i said x

1229
00:45:36,640 --> 00:45:40,560
this is going to hold

1230
00:45:39,280 --> 00:45:43,280
and that's not going to be true no

1231
00:45:40,560 --> 00:45:45,520
matter what you pick for y

1232
00:45:43,280 --> 00:45:47,520
um there is going to be some way to set

1233
00:45:45,520 --> 00:45:50,000
x to make this false

1234
00:45:47,520 --> 00:45:52,160
so does it resist a y such that every x

1235
00:45:50,000 --> 00:45:54,640
makes us true no

1236
00:45:52,160 --> 00:45:56,240
if you try x equal to true it's not

1237
00:45:54,640 --> 00:45:58,079
going to work if you try x equal to

1238
00:45:56,240 --> 00:45:59,359
false it's not going to work

1239
00:45:58,079 --> 00:46:01,119
so this

1240
00:45:59,359 --> 00:46:05,760
second fi2

1241
00:46:01,119 --> 00:46:06,960
expression quantified qbf is false

1242
00:46:05,760 --> 00:46:08,640
okay

1243
00:46:06,960 --> 00:46:09,440
we're going to be playing with these a

1244
00:46:08,640 --> 00:46:11,520
lot

1245
00:46:09,440 --> 00:46:12,560
so it's important to understand

1246
00:46:11,520 --> 00:46:14,960
how this

1247
00:46:12,560 --> 00:46:15,839
this quantification works

1248
00:46:14,960 --> 00:46:18,800
um

1249
00:46:15,839 --> 00:46:21,280
so tqbf

1250
00:46:18,800 --> 00:46:24,000
is the problem of testing

1251
00:46:21,280 --> 00:46:24,960
whether one of these qbfs is true

1252
00:46:24,000 --> 00:46:26,480
or

1253
00:46:24,960 --> 00:46:28,880
phrased as a language it's the

1254
00:46:26,480 --> 00:46:32,640
collection of true qb

1255
00:46:28,880 --> 00:46:36,960
true qbfs and that's where we get the um

1256
00:46:32,640 --> 00:46:39,680
uh the uh acronym tqbf not acronym the

1257
00:46:36,960 --> 00:46:43,560
the the abbreviation tqbf for the true

1258
00:46:39,680 --> 00:46:43,560
quantified boolean formulas

1259
00:46:45,760 --> 00:46:49,119
so

1260
00:46:46,640 --> 00:46:51,520
going back to that example p1 is a true

1261
00:46:49,119 --> 00:46:53,760
quantified boolean formula and v2 is not

1262
00:46:51,520 --> 00:46:54,880
a true quantified building formula so

1263
00:46:53,760 --> 00:46:56,880
that's why

1264
00:46:54,880 --> 00:46:59,359
p1 is in the language v2 is not in the

1265
00:46:56,880 --> 00:46:59,359
language

1266
00:47:00,400 --> 00:47:05,040
now our computational problem is to test

1267
00:47:03,440 --> 00:47:06,800
whether

1268
00:47:05,040 --> 00:47:08,400
quantified boolean formulas are true or

1269
00:47:06,800 --> 00:47:11,119
not

1270
00:47:08,400 --> 00:47:14,319
and now we can do in polynomial space

1271
00:47:11,119 --> 00:47:14,319
oh there's a check in first

1272
00:47:16,079 --> 00:47:21,599
i claim that sat is a special case of

1273
00:47:18,880 --> 00:47:21,599
tqbf

1274
00:47:21,680 --> 00:47:24,800
why is that

1275
00:47:23,280 --> 00:47:25,839
how can we

1276
00:47:24,800 --> 00:47:27,359
um

1277
00:47:25,839 --> 00:47:29,599
think of sat

1278
00:47:27,359 --> 00:47:30,880
as a special case if i give you a sat

1279
00:47:29,599 --> 00:47:33,680
formula

1280
00:47:30,880 --> 00:47:35,520
how can i see that as also a tqbf

1281
00:47:33,680 --> 00:47:36,839
problem if you want to test if that

1282
00:47:35,520 --> 00:47:39,040
formula is

1283
00:47:36,839 --> 00:47:40,720
true what would you say remove all the

1284
00:47:39,040 --> 00:47:43,599
quantifiers

1285
00:47:40,720 --> 00:47:46,960
or add some quantifiers and what kind of

1286
00:47:43,599 --> 00:47:46,960
quantifiers maybe um

1287
00:47:47,119 --> 00:47:52,640
uh how is sat

1288
00:47:49,839 --> 00:47:54,640
just testing a formula satisfiable

1289
00:47:52,640 --> 00:47:56,400
a special case of this

1290
00:47:54,640 --> 00:47:58,319
what i claim is a more general problem

1291
00:47:56,400 --> 00:48:01,359
of solving these

1292
00:47:58,319 --> 00:48:01,359
tqbf problems

1293
00:48:01,599 --> 00:48:05,200
okay

1294
00:48:02,640 --> 00:48:07,839
closing down

1295
00:48:05,200 --> 00:48:07,839
let's call

1296
00:48:11,119 --> 00:48:16,880
yes indeed you know satisfiability

1297
00:48:14,720 --> 00:48:17,839
so c is correct

1298
00:48:16,880 --> 00:48:20,240
when you're talking about a

1299
00:48:17,839 --> 00:48:22,559
satisfiability problem you're saying is

1300
00:48:20,240 --> 00:48:25,599
there a satisfying assignment another

1301
00:48:22,559 --> 00:48:27,599
way of writing that down is

1302
00:48:25,599 --> 00:48:29,680
take the boolean formula represent take

1303
00:48:27,599 --> 00:48:33,040
that boolean formula and put

1304
00:48:29,680 --> 00:48:35,280
exists in front of all the variables

1305
00:48:33,040 --> 00:48:37,839
saying the is there a is there exists

1306
00:48:35,280 --> 00:48:41,280
does there exist a way to set x1 and x2

1307
00:48:37,839 --> 00:48:43,760
and x3 and x4 to make the formula

1308
00:48:41,280 --> 00:48:47,440
true make your formula hold

1309
00:48:43,760 --> 00:48:49,680
so um sat is a special case by adding

1310
00:48:47,440 --> 00:48:52,160
exist quantifiers

1311
00:48:49,680 --> 00:48:54,319
of a tqbf problem

1312
00:48:52,160 --> 00:48:56,640
so c is correct

1313
00:48:54,319 --> 00:48:56,640
um

1314
00:48:56,720 --> 00:49:00,480
okay

1315
00:48:57,599 --> 00:49:03,839
so why is this problem in p space

1316
00:49:00,480 --> 00:49:06,880
as i claimed and for that we're going to

1317
00:49:03,839 --> 00:49:08,000
give a simple recursive algorithm

1318
00:49:06,880 --> 00:49:09,680
um

1319
00:49:08,000 --> 00:49:11,839
in any

1320
00:49:09,680 --> 00:49:13,440
uh a quantified boolean formula now if

1321
00:49:11,839 --> 00:49:16,400
you want to test if it's true or not you

1322
00:49:13,440 --> 00:49:17,839
know we're going to basically strip off

1323
00:49:16,400 --> 00:49:19,920
the leading

1324
00:49:17,839 --> 00:49:22,000
quantifiers

1325
00:49:19,920 --> 00:49:25,520
so if it's an exist quantifier we'll

1326
00:49:22,000 --> 00:49:28,400
remove it and plug in true and false

1327
00:49:25,520 --> 00:49:29,520
associated to its

1328
00:49:28,400 --> 00:49:31,920
variable

1329
00:49:29,520 --> 00:49:34,640
and then solve those problems

1330
00:49:31,920 --> 00:49:34,640
recursively

1331
00:49:35,520 --> 00:49:40,319
okay so this is just going to be a

1332
00:49:36,800 --> 00:49:42,800
recursive procedure for solving

1333
00:49:40,319 --> 00:49:44,800
tqbf problems

1334
00:49:42,800 --> 00:49:46,400
operating by stripping off the the

1335
00:49:44,800 --> 00:49:48,240
quantifiers in front

1336
00:49:46,400 --> 00:49:49,599
and uh getting smaller and smaller

1337
00:49:48,240 --> 00:49:53,280
formulas but now we're going to be

1338
00:49:49,599 --> 00:49:56,400
plugging in uh values true and false um

1339
00:49:53,280 --> 00:50:00,720
instead of relying on the quantifier uh

1340
00:49:56,400 --> 00:50:03,599
to um uh to to to uh

1341
00:50:00,720 --> 00:50:04,720
give us the meaning of the formula

1342
00:50:03,599 --> 00:50:06,079
okay

1343
00:50:04,720 --> 00:50:08,160
so first of all if there are no

1344
00:50:06,079 --> 00:50:10,079
quantifiers then there are no variables

1345
00:50:08,160 --> 00:50:12,400
because all variables have to be bound

1346
00:50:10,079 --> 00:50:15,040
within quantifiers and in that case the

1347
00:50:12,400 --> 00:50:17,680
uh that quantified boolean formula has

1348
00:50:15,040 --> 00:50:19,280
to simply be the statement true or the

1349
00:50:17,680 --> 00:50:20,960
statement false and so you're going to

1350
00:50:19,280 --> 00:50:23,599
output accordingly because that's all it

1351
00:50:20,960 --> 00:50:24,480
can be if you have no variables

1352
00:50:23,599 --> 00:50:26,720
um

1353
00:50:24,480 --> 00:50:29,119
if the formula starts with an exist

1354
00:50:26,720 --> 00:50:30,800
quantifier

1355
00:50:29,119 --> 00:50:33,359
what you're going to do

1356
00:50:30,800 --> 00:50:35,760
so here psi is the remainder of the

1357
00:50:33,359 --> 00:50:37,040
formula after you strip off that exist

1358
00:50:35,760 --> 00:50:39,280
quantifier

1359
00:50:37,040 --> 00:50:41,680
so you're going to evaluate psi now but

1360
00:50:39,280 --> 00:50:44,720
take that variable that was bound by the

1361
00:50:41,680 --> 00:50:45,760
exist and just plug in true

1362
00:50:44,720 --> 00:50:48,319
um

1363
00:50:45,760 --> 00:50:51,040
or and false respectively so you're

1364
00:50:48,319 --> 00:50:53,359
going to get two two now new problems

1365
00:50:51,040 --> 00:50:53,359
um

1366
00:50:53,520 --> 00:50:55,839
and

1367
00:50:54,480 --> 00:50:57,200
uh

1368
00:50:55,839 --> 00:51:00,000
run them

1369
00:50:57,200 --> 00:51:03,520
uh and evaluate them using the same

1370
00:51:00,000 --> 00:51:05,760
procedure recursively uh but now with x

1371
00:51:03,520 --> 00:51:09,520
plugged in for true plugged in for x and

1372
00:51:05,760 --> 00:51:11,280
also then with false plug in for x

1373
00:51:09,520 --> 00:51:13,680
and

1374
00:51:11,280 --> 00:51:16,880
get the answers for those two cases and

1375
00:51:13,680 --> 00:51:18,240
if either one of them ended up accepting

1376
00:51:16,880 --> 00:51:20,960
then you're going to accept because you

1377
00:51:18,240 --> 00:51:23,599
know there exists a value

1378
00:51:20,960 --> 00:51:27,119
uh for x which makes the whole thing

1379
00:51:23,599 --> 00:51:28,640
true because you you you just

1380
00:51:27,119 --> 00:51:30,400
recursively

1381
00:51:28,640 --> 00:51:32,000
showed that there was such a value you

1382
00:51:30,400 --> 00:51:34,720
know either true or false the thing is

1383
00:51:32,000 --> 00:51:36,800
has accepted and if both of them fail

1384
00:51:34,720 --> 00:51:38,559
then you're going to reject and the very

1385
00:51:36,800 --> 00:51:40,640
same idea if you have a for all

1386
00:51:38,559 --> 00:51:42,160
quantifier

1387
00:51:40,640 --> 00:51:44,800
you're going to evaluate

1388
00:51:42,160 --> 00:51:47,440
the remainder of the formula

1389
00:51:44,800 --> 00:51:50,000
again with x equal to true and false so

1390
00:51:47,440 --> 00:51:51,200
as two subproblems

1391
00:51:50,000 --> 00:51:53,200
but now you're going to require them

1392
00:51:51,200 --> 00:51:56,079
both to accept because that's the

1393
00:51:53,200 --> 00:51:58,880
meaning of for all that both assignments

1394
00:51:56,079 --> 00:51:59,839
to x have to make the formula true so

1395
00:51:58,880 --> 00:52:03,040
you're going to

1396
00:51:59,839 --> 00:52:06,000
evaluate them recursively and accept

1397
00:52:03,040 --> 00:52:09,280
both of them are true as determined by

1398
00:52:06,000 --> 00:52:12,160
your recursive your recursion

1399
00:52:09,280 --> 00:52:14,079
okay so how much space does this use

1400
00:52:12,160 --> 00:52:17,200
um i'm not going to go through this in

1401
00:52:14,079 --> 00:52:19,599
great detail but uh

1402
00:52:17,200 --> 00:52:21,599
each recursive level uses just a

1403
00:52:19,599 --> 00:52:24,240
constant amount of space so every time

1404
00:52:21,599 --> 00:52:25,680
you do a recursion you have to remember

1405
00:52:24,240 --> 00:52:28,800
that uh

1406
00:52:25,680 --> 00:52:30,559
that value uh that assignment to that to

1407
00:52:28,800 --> 00:52:32,319
that variable

1408
00:52:30,559 --> 00:52:34,400
you want to think of recursion as being

1409
00:52:32,319 --> 00:52:36,559
implemented on a stack so you're just

1410
00:52:34,400 --> 00:52:38,559
going to pop push on the stack that

1411
00:52:36,559 --> 00:52:41,119
value of that variable

1412
00:52:38,559 --> 00:52:43,920
which is that true or false so basically

1413
00:52:41,119 --> 00:52:45,680
it's one bit of memory uh

1414
00:52:43,920 --> 00:52:48,480
that you're going to require every time

1415
00:52:45,680 --> 00:52:51,280
you're going down the recursion you just

1416
00:52:48,480 --> 00:52:52,720
have to remember what um

1417
00:52:51,280 --> 00:52:55,760
you know

1418
00:52:52,720 --> 00:52:58,839
which case you're working on whether

1419
00:52:55,760 --> 00:53:00,960
x equal to true or x equal to false

1420
00:52:58,839 --> 00:53:04,079
uh and

1421
00:53:00,960 --> 00:53:05,359
um so each recursive level just involves

1422
00:53:04,079 --> 00:53:06,880
constant space

1423
00:53:05,359 --> 00:53:08,640
and the depth of the recursion you know

1424
00:53:06,880 --> 00:53:10,400
how far how much might you have to

1425
00:53:08,640 --> 00:53:12,880
remember well it's going to be at most

1426
00:53:10,400 --> 00:53:14,240
one for every quantifier um

1427
00:53:12,880 --> 00:53:15,359
because that's you know you're stripping

1428
00:53:14,240 --> 00:53:17,920
them off as you're going down the

1429
00:53:15,359 --> 00:53:20,000
recursion so that's going to be at most

1430
00:53:17,920 --> 00:53:21,280
the length of the formula that says most

1431
00:53:20,000 --> 00:53:22,079
of the number of quantifiers you can

1432
00:53:21,280 --> 00:53:23,119
have

1433
00:53:22,079 --> 00:53:25,119
and so

1434
00:53:23,119 --> 00:53:29,520
uh the total amount of space used by

1435
00:53:25,119 --> 00:53:31,119
this is going to be um just n order n

1436
00:53:29,520 --> 00:53:33,280
okay so this

1437
00:53:31,119 --> 00:53:34,880
problem is solved in uh

1438
00:53:33,280 --> 00:53:37,920
in n space

1439
00:53:34,880 --> 00:53:39,680
and so that's why it's in p space

1440
00:53:37,920 --> 00:53:43,839
okay i think that's

1441
00:53:39,680 --> 00:53:43,839
all i wanted to say about this

1442
00:53:46,319 --> 00:53:49,680
okay if we've got the tape and a turning

1443
00:53:48,240 --> 00:53:51,040
machine as memory

1444
00:53:49,680 --> 00:53:53,440
in a modern computer what does the

1445
00:53:51,040 --> 00:53:55,599
finite control correspond to the finite

1446
00:53:53,440 --> 00:53:58,480
control corresponds to just a finite

1447
00:53:55,599 --> 00:54:00,800
additional memory um the tape is an

1448
00:53:58,480 --> 00:54:03,040
unlimited amount of memory uh or if

1449
00:54:00,800 --> 00:54:05,119
we're putting bounds you know the amount

1450
00:54:03,040 --> 00:54:06,960
of tape is going to be

1451
00:54:05,119 --> 00:54:09,599
say n squared memory where n is the

1452
00:54:06,960 --> 00:54:11,200
length of n n is the length of the input

1453
00:54:09,599 --> 00:54:14,400
so um

1454
00:54:11,200 --> 00:54:16,880
yeah they're both memories but um

1455
00:54:14,400 --> 00:54:18,960
the finite control is

1456
00:54:16,880 --> 00:54:21,599
it doesn't grow with n so that's going

1457
00:54:18,960 --> 00:54:23,599
to be just a you know some constant

1458
00:54:21,599 --> 00:54:25,119
amount of memory

1459
00:54:23,599 --> 00:54:28,079
what would be the time complexity of

1460
00:54:25,119 --> 00:54:29,760
this album time complexity would be bad

1461
00:54:28,079 --> 00:54:31,280
it's going to be exponential so you'd

1462
00:54:29,760 --> 00:54:34,000
have to just double check that but it's

1463
00:54:31,280 --> 00:54:35,599
going to be something like 2

1464
00:54:34,000 --> 00:54:37,280
to the

1465
00:54:35,599 --> 00:54:38,880
number of variables that you have two to

1466
00:54:37,280 --> 00:54:41,280
the number of quantifiers

1467
00:54:38,880 --> 00:54:43,200
plus some small overhead for evaluating

1468
00:54:41,280 --> 00:54:44,880
the formula multiple time but it's going

1469
00:54:43,200 --> 00:54:47,200
to be exponential

1470
00:54:44,880 --> 00:54:47,200
um

1471
00:54:47,359 --> 00:54:51,480
that's going to answer for you

1472
00:54:57,280 --> 00:55:02,079
so someone is asking going back again to

1473
00:55:00,319 --> 00:55:03,599
co-np and how do we know there exists a

1474
00:55:02,079 --> 00:55:05,680
problem in cohen p that is co and p

1475
00:55:03,599 --> 00:55:06,559
complete we didn't define even what that

1476
00:55:05,680 --> 00:55:08,880
means

1477
00:55:06,559 --> 00:55:10,079
but uh co-np-complete

1478
00:55:08,880 --> 00:55:12,079
means

1479
00:55:10,079 --> 00:55:14,319
we're going to start seeing other

1480
00:55:12,079 --> 00:55:17,680
examples of completeness for different

1481
00:55:14,319 --> 00:55:18,960
complexity classes in particular one of

1482
00:55:17,680 --> 00:55:20,400
one thing that's going to happen on

1483
00:55:18,960 --> 00:55:24,079
tuesdays we'll see

1484
00:55:20,400 --> 00:55:27,200
a problem that's complete for p space

1485
00:55:24,079 --> 00:55:29,760
in fact it's going to be tq tqbf

1486
00:55:27,200 --> 00:55:32,559
sort of looking ahead is going to

1487
00:55:29,760 --> 00:55:33,599
be a piece based complete problem

1488
00:55:32,559 --> 00:55:35,440
but

1489
00:55:33,599 --> 00:55:38,079
we even have to have the notion of what

1490
00:55:35,440 --> 00:55:39,119
we mean by uh complete for these other

1491
00:55:38,079 --> 00:55:42,000
classes

1492
00:55:39,119 --> 00:55:45,760
and in the case of co np a problem is co

1493
00:55:42,000 --> 00:55:47,920
and p complete if it's in in co np and

1494
00:55:45,760 --> 00:55:50,160
every other co np problem is polynomial

1495
00:55:47,920 --> 00:55:52,400
time reducible to it so just exactly the

1496
00:55:50,160 --> 00:55:54,799
same as we have for np just plugging in

1497
00:55:52,400 --> 00:55:57,119
co np instead

1498
00:55:54,799 --> 00:55:57,119
and

1499
00:55:58,960 --> 00:56:03,359
you just have to work through the logic

1500
00:56:01,280 --> 00:56:05,680
but it's pretty straightforward

1501
00:56:03,359 --> 00:56:07,839
the complement of any np complete

1502
00:56:05,680 --> 00:56:11,119
problem is going to be a co-np-complete

1503
00:56:07,839 --> 00:56:12,720
problem using that definition um

1504
00:56:11,119 --> 00:56:14,960
uh so

1505
00:56:12,720 --> 00:56:17,680
just i i don't want to go through

1506
00:56:14,960 --> 00:56:19,760
through that those simple steps but

1507
00:56:17,680 --> 00:56:21,119
you just can go and verify that offline

1508
00:56:19,760 --> 00:56:22,640
that that's

1509
00:56:21,119 --> 00:56:24,079
going to be true and i think we're going

1510
00:56:22,640 --> 00:56:26,400
to probably talk about that later in the

1511
00:56:24,079 --> 00:56:28,640
semester too

1512
00:56:26,400 --> 00:56:28,640
um

1513
00:56:28,960 --> 00:56:35,359
so another question how does the tqbf

1514
00:56:32,799 --> 00:56:35,359
algorithm

1515
00:56:37,119 --> 00:56:42,960
ah that is a good question here um

1516
00:56:40,400 --> 00:56:46,079
why is the tqbf algorithm that i just

1517
00:56:42,960 --> 00:56:47,839
described in p space doesn't the thing

1518
00:56:46,079 --> 00:56:49,839
every time i'm doing the recursion

1519
00:56:47,839 --> 00:56:52,000
doesn't things branch out so that i end

1520
00:56:49,839 --> 00:56:53,920
up using exponential space

1521
00:56:52,000 --> 00:56:55,119
critical thing which

1522
00:56:53,920 --> 00:56:56,799
i don't i actually don't think i

1523
00:56:55,119 --> 00:56:58,720
mentioned which i think is important to

1524
00:56:56,799 --> 00:57:01,440
observe is that when you're doing those

1525
00:56:58,720 --> 00:57:04,240
two recursive calls when you set x equal

1526
00:57:01,440 --> 00:57:06,000
to true and set x equal to false

1527
00:57:04,240 --> 00:57:08,559
after you've determined that the the

1528
00:57:06,000 --> 00:57:11,040
answer for when you set x equal to true

1529
00:57:08,559 --> 00:57:13,119
now you reuse that space

1530
00:57:11,040 --> 00:57:14,559
that very same space

1531
00:57:13,119 --> 00:57:16,079
to test what happens when you have x

1532
00:57:14,559 --> 00:57:18,319
equal to false

1533
00:57:16,079 --> 00:57:20,000
so that's that's the power of space

1534
00:57:18,319 --> 00:57:21,839
which makes it different from time is

1535
00:57:20,000 --> 00:57:23,920
that it can be reused

1536
00:57:21,839 --> 00:57:26,559
so after you've got the answer for when

1537
00:57:23,920 --> 00:57:28,559
you have x equal to true now you free up

1538
00:57:26,559 --> 00:57:30,640
that space that's no longer needed

1539
00:57:28,559 --> 00:57:32,000
anymore you just remember the answer and

1540
00:57:30,640 --> 00:57:34,160
now you see what happens when you have x

1541
00:57:32,000 --> 00:57:36,240
equal to false using that same space so

1542
00:57:34,160 --> 00:57:38,000
there's no exponential blow-up that's

1543
00:57:36,240 --> 00:57:41,760
that's an important point i'm glad you

1544
00:57:38,000 --> 00:57:43,440
gave me the chance to to say it

1545
00:57:41,760 --> 00:57:45,359
so somebody's asking about

1546
00:57:43,440 --> 00:57:47,119
defining time of an undetermined turing

1547
00:57:45,359 --> 00:57:48,160
machine to the maximum

1548
00:57:47,119 --> 00:57:49,599
time

1549
00:57:48,160 --> 00:57:51,200
of each branch well that's sort of what

1550
00:57:49,599 --> 00:57:52,960
we have done maybe i don't understand

1551
00:57:51,200 --> 00:57:55,839
your question but you'll have to ask it

1552
00:57:52,960 --> 00:57:58,400
after after um afterwards because i want

1553
00:57:55,839 --> 00:57:59,599
to i don't want to be delaying any more

1554
00:57:58,400 --> 00:58:00,799
than we

1555
00:57:59,599 --> 00:58:02,160
that we have

1556
00:58:00,799 --> 00:58:04,319
so

1557
00:58:02,160 --> 00:58:05,280
we're going to we're going to go back

1558
00:58:04,319 --> 00:58:09,400
and

1559
00:58:05,280 --> 00:58:09,400
um move on here

1560
00:58:12,000 --> 00:58:14,079
okay

1561
00:58:13,119 --> 00:58:15,280
second

1562
00:58:14,079 --> 00:58:17,119
example

1563
00:58:15,280 --> 00:58:18,480
um and this one is a kind of a fun

1564
00:58:17,119 --> 00:58:20,720
example but it's also going to be an

1565
00:58:18,480 --> 00:58:22,480
important one for us um it's called the

1566
00:58:20,720 --> 00:58:24,000
latter problem

1567
00:58:22,480 --> 00:58:25,680
now so you may have seen something

1568
00:58:24,000 --> 00:58:28,079
called the word ladder

1569
00:58:25,680 --> 00:58:29,200
but in general a ladder is a sequence of

1570
00:58:28,079 --> 00:58:31,440
strings

1571
00:58:29,200 --> 00:58:33,440
which are all of the same length

1572
00:58:31,440 --> 00:58:34,839
but where consecutive strings differ in

1573
00:58:33,440 --> 00:58:36,799
a single

1574
00:58:34,839 --> 00:58:39,040
symbol um

1575
00:58:36,799 --> 00:58:39,040
so

1576
00:58:40,720 --> 00:58:44,720
so for example if you have a word letter

1577
00:58:42,319 --> 00:58:46,559
for english it's going to be a ladder

1578
00:58:44,720 --> 00:58:49,440
where all the words are english all of

1579
00:58:46,559 --> 00:58:52,240
the um strings are english words so

1580
00:58:49,440 --> 00:58:52,240
here's an example

1581
00:58:52,400 --> 00:58:57,520
i thought i fixed that okay here is here

1582
00:58:55,040 --> 00:58:57,520
is a

1583
00:58:58,880 --> 00:59:02,880
a

1584
00:59:00,480 --> 00:59:05,119
word ladder for english and maybe you've

1585
00:59:02,880 --> 00:59:07,440
seen these suppose i want to try to get

1586
00:59:05,119 --> 00:59:09,839
from work to play

1587
00:59:07,440 --> 00:59:11,280
but all of the intermediate

1588
00:59:09,839 --> 00:59:12,960
uh

1589
00:59:11,280 --> 00:59:14,400
strings should be

1590
00:59:12,960 --> 00:59:15,920
english words

1591
00:59:14,400 --> 00:59:18,640
with four letters

1592
00:59:15,920 --> 00:59:20,319
that differ from their previous one in

1593
00:59:18,640 --> 00:59:22,079
only a single letter

1594
00:59:20,319 --> 00:59:22,960
and i want to somehow change the word

1595
00:59:22,079 --> 00:59:25,680
work

1596
00:59:22,960 --> 00:59:28,079
to the word play so i don't know if

1597
00:59:25,680 --> 00:59:30,480
you know so for example i can change

1598
00:59:28,079 --> 00:59:32,880
work to pork

1599
00:59:30,480 --> 00:59:35,040
so here's just one letter difference

1600
00:59:32,880 --> 00:59:37,200
um which looks like it's an improvement

1601
00:59:35,040 --> 00:59:39,119
because now i have the i'm agree an

1602
00:59:37,200 --> 00:59:40,799
agreement on the play

1603
00:59:39,119 --> 00:59:42,559
um but sometimes you know you might

1604
00:59:40,799 --> 00:59:44,000
change it you might have a good change

1605
00:59:42,559 --> 00:59:46,880
and then you have to undo it later which

1606
00:59:44,000 --> 00:59:50,400
i think actually happens here um

1607
00:59:46,880 --> 00:59:53,359
so pork then this port but then we gave

1608
00:59:50,400 --> 00:59:55,520
up that progress we made port

1609
00:59:53,359 --> 00:59:56,799
to sort

1610
00:59:55,520 --> 00:59:59,119
to suit

1611
00:59:56,799 --> 01:00:01,440
to slot you understand again you

1612
00:59:59,119 --> 01:00:03,440
understand what i'm doing here each case

1613
01:00:01,440 --> 01:00:05,599
i'm just changing a single letter

1614
01:00:03,440 --> 01:00:07,760
but all of these words all of these have

1615
01:00:05,599 --> 01:00:09,280
to be legitimate english words of length

1616
01:00:07,760 --> 01:00:10,960
four

1617
01:00:09,280 --> 01:00:12,079
plot

1618
01:00:10,960 --> 01:00:14,799
ploy

1619
01:00:12,079 --> 01:00:15,599
and then play

1620
01:00:14,799 --> 01:00:17,760
okay

1621
01:00:15,599 --> 01:00:18,960
so that's what a word lighter in english

1622
01:00:17,760 --> 01:00:20,400
would be of course you can do it in

1623
01:00:18,960 --> 01:00:23,280
different languages and i'm going to

1624
01:00:20,400 --> 01:00:25,680
talk about it abstractly where

1625
01:00:23,280 --> 01:00:30,319
instead of having any natural human

1626
01:00:25,680 --> 01:00:33,359
language as being the uh test for a word

1627
01:00:30,319 --> 01:00:34,960
b for being a string being legitimate

1628
01:00:33,359 --> 01:00:36,640
i'm going to define a

1629
01:00:34,960 --> 01:00:39,200
um

1630
01:00:36,640 --> 01:00:41,599
any old language

1631
01:00:39,200 --> 01:00:43,680
uh let's let's say it's a is going to be

1632
01:00:41,599 --> 01:00:44,880
some language some set of strings and

1633
01:00:43,680 --> 01:00:46,640
the and the

1634
01:00:44,880 --> 01:00:48,880
those are going to be the legal strings

1635
01:00:46,640 --> 01:00:50,880
that can be in the ladder

1636
01:00:48,880 --> 01:00:53,440
so a ladder in a is a lot of strings

1637
01:00:50,880 --> 01:00:54,319
that are all members of a

1638
01:00:53,440 --> 01:00:56,799
um

1639
01:00:54,319 --> 01:00:57,760
and now the

1640
01:00:56,799 --> 01:01:00,480
the

1641
01:00:57,760 --> 01:01:02,319
latter dfa problem is

1642
01:01:00,480 --> 01:01:03,680
a is going to be the language of some

1643
01:01:02,319 --> 01:01:06,799
dfa

1644
01:01:03,680 --> 01:01:06,799
so i'm giving you b

1645
01:01:07,119 --> 01:01:10,319
um

1646
01:01:08,240 --> 01:01:12,400
and so i want and then a start string

1647
01:01:10,319 --> 01:01:15,040
and an n string so this is like work and

1648
01:01:12,400 --> 01:01:16,880
play u and v are like work and play so

1649
01:01:15,040 --> 01:01:20,319
where b is a dfa

1650
01:01:16,880 --> 01:01:21,680
and its language has a ladder that goes

1651
01:01:20,319 --> 01:01:25,640
from u to v

1652
01:01:21,680 --> 01:01:25,640
here are the intermediate strings

1653
01:01:26,079 --> 01:01:28,400
okay

1654
01:01:28,720 --> 01:01:30,960
and

1655
01:01:36,720 --> 01:01:39,839
all right um

1656
01:01:40,079 --> 01:01:42,319
so

1657
01:01:41,040 --> 01:01:43,599
um

1658
01:01:42,319 --> 01:01:47,520
i'm going to show you that this latter

1659
01:01:43,599 --> 01:01:50,000
dfa problem is in np space

1660
01:01:47,520 --> 01:01:51,520
okay and it's not this is not super hard

1661
01:01:50,000 --> 01:01:53,119
because basically

1662
01:01:51,520 --> 01:01:54,480
uh well

1663
01:01:53,119 --> 01:01:56,480
let's just actually

1664
01:01:54,480 --> 01:01:58,000
look at the slide here

1665
01:01:56,480 --> 01:01:59,599
the way it's going to work is it's not

1666
01:01:58,000 --> 01:02:01,440
deterministically going to guess that

1667
01:01:59,599 --> 01:02:03,440
sequence from u to v

1668
01:02:01,440 --> 01:02:05,440
so if i if i'm trying to get from work

1669
01:02:03,440 --> 01:02:07,359
to play imagine those i'm going to be

1670
01:02:05,440 --> 01:02:08,240
using this as um

1671
01:02:07,359 --> 01:02:10,000
you know

1672
01:02:08,240 --> 01:02:11,839
in place of the

1673
01:02:10,000 --> 01:02:13,839
uh the

1674
01:02:11,839 --> 01:02:15,280
of the language of my fine art automaton

1675
01:02:13,839 --> 01:02:16,720
just because this is easier to talk

1676
01:02:15,280 --> 01:02:18,880
about but imagine these are being

1677
01:02:16,720 --> 01:02:21,520
strings that are that are accepted by

1678
01:02:18,880 --> 01:02:23,520
that that dfa

1679
01:02:21,520 --> 01:02:25,920
um so now i'm trying to get from my

1680
01:02:23,520 --> 01:02:27,920
string u to the string v and i want to

1681
01:02:25,920 --> 01:02:29,280
test can i get there

1682
01:02:27,920 --> 01:02:31,280
by some

1683
01:02:29,280 --> 01:02:33,839
uh changing one letter at a time but

1684
01:02:31,280 --> 01:02:35,359
staying as strings that are accepted by

1685
01:02:33,839 --> 01:02:37,440
the dfa

1686
01:02:35,359 --> 01:02:40,520
um

1687
01:02:37,440 --> 01:02:42,480
i'm just going to guess that sequence

1688
01:02:40,520 --> 01:02:44,400
non-deterministically

1689
01:02:42,480 --> 01:02:46,480
but i have to make sure careful of two

1690
01:02:44,400 --> 01:02:48,079
things um

1691
01:02:46,480 --> 01:02:50,319
i don't want to guess the sequence solid

1692
01:02:48,079 --> 01:02:52,799
in advance because that sequence might

1693
01:02:50,319 --> 01:02:54,319
be exponentially long

1694
01:02:52,799 --> 01:02:56,640
you have to calculate how long it could

1695
01:02:54,319 --> 01:02:59,039
possibly be but you might

1696
01:02:56,640 --> 01:03:00,559
might you know you might change to one

1697
01:02:59,039 --> 01:03:01,920
symbol then change it to a different

1698
01:03:00,559 --> 01:03:03,920
symbol then change it back to that

1699
01:03:01,920 --> 01:03:04,799
original symbol or

1700
01:03:03,920 --> 01:03:06,480
so

1701
01:03:04,799 --> 01:03:08,559
the the only bound that you can write

1702
01:03:06,480 --> 01:03:10,640
down is the number of possible strings

1703
01:03:08,559 --> 01:03:13,039
that you can have of that length

1704
01:03:10,640 --> 01:03:14,240
um so it might be exponential uh you

1705
01:03:13,039 --> 01:03:16,960
don't want to write down that whole

1706
01:03:14,240 --> 01:03:18,799
thing because that's going to be

1707
01:03:16,960 --> 01:03:20,640
exceeding your space bound

1708
01:03:18,799 --> 01:03:23,280
but what you don't need to you're just

1709
01:03:20,640 --> 01:03:25,039
going to guess them one at a time

1710
01:03:23,280 --> 01:03:27,520
forgetting about the previous ones just

1711
01:03:25,039 --> 01:03:31,039
keep guessing the next uh one in the

1712
01:03:27,520 --> 01:03:33,039
sequence and only remembering that one

1713
01:03:31,039 --> 01:03:35,440
and seeing if uh

1714
01:03:33,039 --> 01:03:38,079
you're ever get to the the string your

1715
01:03:35,440 --> 01:03:39,520
you your target string

1716
01:03:38,079 --> 01:03:41,599
but then when you do that you have to

1717
01:03:39,520 --> 01:03:43,119
make sure that you don't end up going

1718
01:03:41,599 --> 01:03:45,440
forever

1719
01:03:43,119 --> 01:03:48,880
um because that's not allowed

1720
01:03:45,440 --> 01:03:51,280
in your uh in your um

1721
01:03:48,880 --> 01:03:52,559
in your np space algorithm

1722
01:03:51,280 --> 01:03:53,520
uh

1723
01:03:52,559 --> 01:03:55,440
so

1724
01:03:53,520 --> 01:03:58,319
you're going to have to keep a counter

1725
01:03:55,440 --> 01:04:00,079
to make sure that if you go beyond that

1726
01:03:58,319 --> 01:04:01,520
bound which is going to be the maximum

1727
01:04:00,079 --> 01:04:03,599
number of strings you could possibly

1728
01:04:01,520 --> 01:04:06,000
have then you're going to just shot that

1729
01:04:03,599 --> 01:04:07,359
branch of the non-determinism off

1730
01:04:06,000 --> 01:04:08,400
you're going to just reject on that

1731
01:04:07,359 --> 01:04:10,319
branch

1732
01:04:08,400 --> 01:04:13,119
okay so here is i'm going to write to

1733
01:04:10,319 --> 01:04:13,119
say this here

1734
01:04:13,359 --> 01:04:19,119
here is my non-deterministic uh

1735
01:04:16,720 --> 01:04:23,440
you know polynomial space procedure

1736
01:04:19,119 --> 01:04:25,280
um i'm given my language my dfab and my

1737
01:04:23,440 --> 01:04:29,200
start and end strings

1738
01:04:25,280 --> 01:04:31,760
i let y equal the start string

1739
01:04:29,200 --> 01:04:33,280
write down the length of my strings that

1740
01:04:31,760 --> 01:04:35,599
i'm going to have to keep

1741
01:04:33,280 --> 01:04:37,119
in mind all the way through

1742
01:04:35,599 --> 01:04:40,240
and then i'm going to just repeat the

1743
01:04:37,119 --> 01:04:43,039
following t times where t is the maximum

1744
01:04:40,240 --> 01:04:45,200
length as can be which is the the size

1745
01:04:43,039 --> 01:04:47,760
of the alphabet of these of these things

1746
01:04:45,200 --> 01:04:49,920
to the nth power where m is the length

1747
01:04:47,760 --> 01:04:51,119
of those strings

1748
01:04:49,920 --> 01:04:53,520
uh and i'm just going to not

1749
01:04:51,119 --> 01:04:55,200
deterministically change one symbol

1750
01:04:53,520 --> 01:04:57,039
at a time

1751
01:04:55,200 --> 01:04:59,359
making sure that i'm staying in the

1752
01:04:57,039 --> 01:05:01,280
language

1753
01:04:59,359 --> 01:05:02,799
so rejecting immediately if that change

1754
01:05:01,280 --> 01:05:04,720
introduced a

1755
01:05:02,799 --> 01:05:07,039
string outside the language

1756
01:05:04,720 --> 01:05:10,480
and accepting if that string that i get

1757
01:05:07,039 --> 01:05:12,960
by changing that single symbol

1758
01:05:10,480 --> 01:05:13,839
is now my target

1759
01:05:12,960 --> 01:05:16,880
um

1760
01:05:13,839 --> 01:05:19,520
and if i've gone through my bound and i

1761
01:05:16,880 --> 01:05:21,119
haven't managed to reach

1762
01:05:19,520 --> 01:05:23,839
that target then i'm just going to

1763
01:05:21,119 --> 01:05:23,839
reject

1764
01:05:25,680 --> 01:05:30,400
and we just have to observe that this

1765
01:05:28,079 --> 01:05:32,160
algorithm

1766
01:05:30,400 --> 01:05:34,480
doesn't use too much space

1767
01:05:32,160 --> 01:05:36,480
so if you imagine what we need here

1768
01:05:34,480 --> 01:05:38,160
here's my input unv

1769
01:05:36,480 --> 01:05:39,680
which is of length n

1770
01:05:38,160 --> 01:05:43,119
and the total amount of space i just

1771
01:05:39,680 --> 01:05:43,119
have to remember the current y

1772
01:05:44,400 --> 01:05:48,000
um

1773
01:05:45,760 --> 01:05:51,839
and um

1774
01:05:48,000 --> 01:05:55,119
and also my counter t my counter up to t

1775
01:05:51,839 --> 01:05:58,319
so um each of those can be written down

1776
01:05:55,119 --> 01:05:59,920
with it with uh essentially in space so

1777
01:05:58,319 --> 01:06:01,839
the total amount is going to be order n

1778
01:05:59,920 --> 01:06:02,720
space

1779
01:06:01,839 --> 01:06:05,839
um

1780
01:06:02,720 --> 01:06:07,440
so that shows that uh this latter dfa

1781
01:06:05,839 --> 01:06:08,960
problem is actually in non-deterministic

1782
01:06:07,440 --> 01:06:12,559
space n

1783
01:06:08,960 --> 01:06:12,559
not deterministic linear space

1784
01:06:12,640 --> 01:06:17,280
um

1785
01:06:14,559 --> 01:06:18,640
and what we're going to show next

1786
01:06:17,280 --> 01:06:20,720
um

1787
01:06:18,640 --> 01:06:22,720
is that this language is actually

1788
01:06:20,720 --> 01:06:26,400
solvable in deterministic space and this

1789
01:06:22,720 --> 01:06:29,359
is kind of perhaps a bit of a surprise

1790
01:06:26,400 --> 01:06:29,359
okay um

1791
01:06:30,799 --> 01:06:36,240
so what's the size of the input the size

1792
01:06:33,119 --> 01:06:38,319
of the input is

1793
01:06:36,240 --> 01:06:42,559
uh going to be what it takes to write

1794
01:06:38,319 --> 01:06:45,200
down the uh the dfa and the uh the two

1795
01:06:42,559 --> 01:06:48,319
strings u and v um

1796
01:06:45,200 --> 01:06:48,319
so uh

1797
01:06:48,880 --> 01:06:51,760
um here

1798
01:06:50,720 --> 01:06:53,039
uh

1799
01:06:51,760 --> 01:06:55,039
yeah i mean i i should have also

1800
01:06:53,039 --> 01:06:57,520
included as part of the input

1801
01:06:55,039 --> 01:06:59,280
the the description of b itself

1802
01:06:57,520 --> 01:07:01,680
but um

1803
01:06:59,280 --> 01:07:03,039
uh so

1804
01:07:01,680 --> 01:07:05,280
but that's going to even work in my

1805
01:07:03,039 --> 01:07:07,599
favor because um

1806
01:07:05,280 --> 01:07:09,520
so this this is slightly incorrect

1807
01:07:07,599 --> 01:07:12,480
because b itself has to appear as part

1808
01:07:09,520 --> 01:07:14,960
of the input so apologies for that but

1809
01:07:12,480 --> 01:07:16,559
still the amount of uh space used is

1810
01:07:14,960 --> 01:07:18,000
going to be order n

1811
01:07:16,559 --> 01:07:20,319
um because these are going to be

1812
01:07:18,000 --> 01:07:21,839
actually less than n

1813
01:07:20,319 --> 01:07:23,200
um

1814
01:07:21,839 --> 01:07:25,280
so let me

1815
01:07:23,200 --> 01:07:27,520
jump be so we don't run out of time for

1816
01:07:25,280 --> 01:07:28,880
the lecture we can save additional

1817
01:07:27,520 --> 01:07:30,160
questions for

1818
01:07:28,880 --> 01:07:31,680
afterward i'll stick around for a few

1819
01:07:30,160 --> 01:07:34,799
minutes i just really have one more

1820
01:07:31,680 --> 01:07:37,039
slide here um and that is proving this

1821
01:07:34,799 --> 01:07:38,720
theorem that ladder can be done in

1822
01:07:37,039 --> 01:07:39,920
deterministically in polynomial space

1823
01:07:38,720 --> 01:07:42,880
and that's going to be

1824
01:07:39,920 --> 01:07:44,400
important as a kind of a

1825
01:07:42,880 --> 01:07:46,960
preview of what we're going to be doing

1826
01:07:44,400 --> 01:07:46,960
on tuesday

1827
01:07:48,240 --> 01:07:50,799
and you know

1828
01:07:50,960 --> 01:07:54,720
if this goes a little fast i'll go over

1829
01:07:53,280 --> 01:07:56,799
it again on tuesday so let's just see

1830
01:07:54,720 --> 01:08:00,400
how it goes so i'm going to show the

1831
01:07:56,799 --> 01:08:00,400
same ladder dfa problem

1832
01:08:00,480 --> 01:08:04,240
is solvable deterministically

1833
01:08:03,440 --> 01:08:06,160
in

1834
01:08:04,240 --> 01:08:08,079
polynomial space and but this time it's

1835
01:08:06,160 --> 01:08:10,240
going to be in squared space instead of

1836
01:08:08,079 --> 01:08:12,079
non-deterministically in end space so

1837
01:08:10,240 --> 01:08:14,799
there's going to be some cost but it's

1838
01:08:12,079 --> 01:08:16,960
only going to be a squaring

1839
01:08:14,799 --> 01:08:19,120
so remember what the problem is

1840
01:08:16,960 --> 01:08:20,640
you know i'm giving you that dfa

1841
01:08:19,120 --> 01:08:23,359
and giving you two strings in the

1842
01:08:20,640 --> 01:08:24,640
language of that dfa and i want to know

1843
01:08:23,359 --> 01:08:25,920
can i get

1844
01:08:24,640 --> 01:08:28,000
from one

1845
01:08:25,920 --> 01:08:31,279
the first string to the second string by

1846
01:08:28,000 --> 01:08:34,319
changing one symbol at a time but always

1847
01:08:31,279 --> 01:08:39,080
making sure that the strings are

1848
01:08:34,319 --> 01:08:39,080
along the way are accepted by that dfa

1849
01:08:39,199 --> 01:08:41,839
okay

1850
01:08:40,159 --> 01:08:42,880
so i'm going to introduce notation

1851
01:08:41,839 --> 01:08:45,920
saying

1852
01:08:42,880 --> 01:08:48,159
can i get from string u to v by a ladder

1853
01:08:45,920 --> 01:08:51,279
but now i'm limiting how many steps i

1854
01:08:48,159 --> 01:08:52,799
can take so i'm writing u to v but doing

1855
01:08:51,279 --> 01:08:55,440
it only within b

1856
01:08:52,799 --> 01:08:57,199
b intermediate strings b steps

1857
01:08:55,440 --> 01:08:58,480
so is there a ladder from u to v of

1858
01:08:57,199 --> 01:09:00,080
length at most b

1859
01:08:58,480 --> 01:09:02,880
that's what it means to write this

1860
01:09:00,080 --> 01:09:02,880
notation down

1861
01:09:03,600 --> 01:09:07,120
so i'm going to

1862
01:09:04,880 --> 01:09:08,080
uh give you a recursive procedure to

1863
01:09:07,120 --> 01:09:10,239
solve

1864
01:09:08,080 --> 01:09:12,480
the bounded ladder problem where it's

1865
01:09:10,239 --> 01:09:13,199
just like the before but now i'm going

1866
01:09:12,480 --> 01:09:15,359
to

1867
01:09:13,199 --> 01:09:17,359
say not only does there a ladder from u

1868
01:09:15,359 --> 01:09:20,679
to v but there's a ladder of length at

1869
01:09:17,359 --> 01:09:20,679
most b

1870
01:09:22,400 --> 01:09:27,440
okay so that's going to allow me to

1871
01:09:24,560 --> 01:09:30,640
solve the latter problem recursively by

1872
01:09:27,440 --> 01:09:30,640
shrinking the size of b

1873
01:09:30,719 --> 01:09:33,719
um

1874
01:09:34,239 --> 01:09:38,400
uh

1875
01:09:36,080 --> 01:09:38,400
okay

1876
01:09:38,799 --> 01:09:43,600
so um

1877
01:09:40,880 --> 01:09:45,839
let's how is this going to work

1878
01:09:43,600 --> 01:09:46,960
uh

1879
01:09:45,839 --> 01:09:49,120
um

1880
01:09:46,960 --> 01:09:53,199
well here's going to be the idea

1881
01:09:49,120 --> 01:09:53,199
so here is my u and my v

1882
01:09:53,440 --> 01:09:56,719
um

1883
01:09:54,320 --> 01:09:57,800
and the procedure is going to work by

1884
01:09:56,719 --> 01:10:00,640
instead of

1885
01:09:57,800 --> 01:10:03,120
non-deterministically guessing

1886
01:10:00,640 --> 01:10:04,719
the steps that take me from work to play

1887
01:10:03,120 --> 01:10:05,679
because i don't have non-determinism

1888
01:10:04,719 --> 01:10:07,199
anymore i have to operate

1889
01:10:05,679 --> 01:10:09,840
deterministically

1890
01:10:07,199 --> 01:10:11,760
what i'm going to do is

1891
01:10:09,840 --> 01:10:13,040
work instead of

1892
01:10:11,760 --> 01:10:15,120
um

1893
01:10:13,040 --> 01:10:17,840
i'm going to instead of going from

1894
01:10:15,120 --> 01:10:19,920
looking at the very first

1895
01:10:17,840 --> 01:10:22,400
thing that follows from from you i'm

1896
01:10:19,920 --> 01:10:27,040
going to jump right to the middle

1897
01:10:22,400 --> 01:10:27,040
and try every possible middle string

1898
01:10:28,239 --> 01:10:31,360
oh i have no clue even what that middle

1899
01:10:30,239 --> 01:10:35,920
string should look like so i'm going to

1900
01:10:31,360 --> 01:10:35,920
try all possibilities in the sequence

1901
01:10:36,000 --> 01:10:39,440
but then i'm going to use once i have

1902
01:10:37,920 --> 01:10:42,400
one of those possibilities i'm going to

1903
01:10:39,440 --> 01:10:44,400
recursively try to solve the problem by

1904
01:10:42,400 --> 01:10:47,760
splitting that now but i'm now going to

1905
01:10:44,400 --> 01:10:50,239
divide that b value in half

1906
01:10:47,760 --> 01:10:51,840
okay so here is the maximum value we can

1907
01:10:50,239 --> 01:10:55,199
have this is the t from the previous

1908
01:10:51,840 --> 01:10:57,679
slide which is the maximum length um

1909
01:10:55,199 --> 01:11:00,480
and i uh

1910
01:10:57,679 --> 01:11:02,800
here i'm going to try every possible

1911
01:11:00,480 --> 01:11:04,560
intermediate let's start off with a

1912
01:11:02,800 --> 01:11:05,600
all a's

1913
01:11:04,560 --> 01:11:08,159
um

1914
01:11:05,600 --> 01:11:11,040
and now i cut the problem in half can i

1915
01:11:08,159 --> 01:11:12,560
get from work to all a's and all a's to

1916
01:11:11,040 --> 01:11:14,800
play well very first thing i should

1917
01:11:12,560 --> 01:11:18,000
check is making sure that all a's

1918
01:11:14,800 --> 01:11:19,280
in fact is a string uh in the language

1919
01:11:18,000 --> 01:11:21,520
and if we're thinking of the languages

1920
01:11:19,280 --> 01:11:23,520
sort of you know matching it's like

1921
01:11:21,520 --> 01:11:25,679
english all a's is not

1922
01:11:23,520 --> 01:11:26,640
a legitimate word so you try the next

1923
01:11:25,679 --> 01:11:28,800
one

1924
01:11:26,640 --> 01:11:30,480
aab and this is how it's going to work

1925
01:11:28,800 --> 01:11:31,679
but now you're going to be instead of

1926
01:11:30,480 --> 01:11:33,679
using english you're going to feed it

1927
01:11:31,679 --> 01:11:36,400
into the finite automaton just one after

1928
01:11:33,679 --> 01:11:38,719
the next trying every possibility until

1929
01:11:36,400 --> 01:11:40,480
you know like a clock

1930
01:11:38,719 --> 01:11:42,320
like a like an odometer

1931
01:11:40,480 --> 01:11:45,040
trying them all

1932
01:11:42,320 --> 01:11:46,719
until eventually you find a string

1933
01:11:45,040 --> 01:11:48,320
that's in the language

1934
01:11:46,719 --> 01:11:50,640
sort of i'm representing that by an

1935
01:11:48,320 --> 01:11:52,640
english word able maybe that's the first

1936
01:11:50,640 --> 01:11:55,120
word that you would have found and then

1937
01:11:52,640 --> 01:11:57,920
once you find that you're gonna

1938
01:11:55,120 --> 01:12:02,480
can i get from work to able and able to

1939
01:11:57,920 --> 01:12:05,920
play recursively reusing the space again

1940
01:12:02,480 --> 01:12:08,640
but now where the bound is cut in half

1941
01:12:05,920 --> 01:12:09,440
okay so that's that's the whole album

1942
01:12:08,640 --> 01:12:11,199
so

1943
01:12:09,440 --> 01:12:13,360
um

1944
01:12:11,199 --> 01:12:16,320
just going through it quickly and we'll

1945
01:12:13,360 --> 01:12:17,360
do this again um

1946
01:12:16,320 --> 01:12:19,760
uh

1947
01:12:17,360 --> 01:12:23,440
here is my

1948
01:12:19,760 --> 01:12:25,360
dfa going from u to v within b steps

1949
01:12:23,440 --> 01:12:28,000
first of all

1950
01:12:25,360 --> 01:12:31,360
oh this is bad uh t should not be one b

1951
01:12:28,000 --> 01:12:33,360
this should be b if b is one um

1952
01:12:31,360 --> 01:12:36,320
can i quickly fix that

1953
01:12:33,360 --> 01:12:37,440
uh so these t's should be b's my

1954
01:12:36,320 --> 01:12:39,679
apologies

1955
01:12:37,440 --> 01:12:39,679
um

1956
01:12:40,080 --> 01:12:44,800
so if t is one if b is one

1957
01:12:43,440 --> 01:12:47,679
then they have to d then i'm only

1958
01:12:44,800 --> 01:12:50,159
allowed a a ladder of length one now i

1959
01:12:47,679 --> 01:12:51,760
just check at the media directly do you

1960
01:12:50,159 --> 01:12:53,840
and v different in just

1961
01:12:51,760 --> 01:12:57,199
in one place

1962
01:12:53,840 --> 01:12:59,360
if yes then accept else i reject

1963
01:12:57,199 --> 01:13:01,120
uh if it's greater than one now i'm

1964
01:12:59,360 --> 01:13:03,280
going to do this procedure that i

1965
01:13:01,120 --> 01:13:05,280
described i'm going to try for each

1966
01:13:03,280 --> 01:13:07,040
possible w

1967
01:13:05,280 --> 01:13:08,320
uh

1968
01:13:07,040 --> 01:13:09,520
in the middle

1969
01:13:08,320 --> 01:13:12,000
um

1970
01:13:09,520 --> 01:13:12,000
i'm gonna

1971
01:13:13,600 --> 01:13:18,400
try that w test whether i can get from u

1972
01:13:16,239 --> 01:13:20,640
to w in half the number of steps and

1973
01:13:18,400 --> 01:13:23,840
from w to v in half the number of steps

1974
01:13:20,640 --> 01:13:27,199
and except if they both accept um

1975
01:13:23,840 --> 01:13:28,880
and if trying all possible w's

1976
01:13:27,199 --> 01:13:30,960
none of them work then i know that

1977
01:13:28,880 --> 01:13:33,360
there's no way to get from u to v and b

1978
01:13:30,960 --> 01:13:35,520
steps and so then i reject

1979
01:13:33,360 --> 01:13:38,000
okay and then to do

1980
01:13:35,520 --> 01:13:40,239
the original problem which was not the

1981
01:13:38,000 --> 01:13:42,560
bounded ladder problem i just do the

1982
01:13:40,239 --> 01:13:43,520
bounded line i do the bounded ladder

1983
01:13:42,560 --> 01:13:45,679
problem

1984
01:13:43,520 --> 01:13:47,360
where i put in t which is the maximum

1985
01:13:45,679 --> 01:13:50,480
possible length that it could be to get

1986
01:13:47,360 --> 01:13:53,120
from work to play out to get from u to v

1987
01:13:50,480 --> 01:13:54,719
okay so the space analysis

1988
01:13:53,120 --> 01:13:56,159
um

1989
01:13:54,719 --> 01:13:57,120
well i'm kind of out of time here so

1990
01:13:56,159 --> 01:13:58,800
we're going to go through this again

1991
01:13:57,120 --> 01:14:00,880
next time

1992
01:13:58,800 --> 01:14:03,520
we have a very quick

1993
01:14:00,880 --> 01:14:05,600
so let me skip that uh analysis i'll

1994
01:14:03,520 --> 01:14:07,440
review this next time i have a very

1995
01:14:05,600 --> 01:14:08,719
quick check-in i just want to get to you

1996
01:14:07,440 --> 01:14:09,679
get get here

1997
01:14:08,719 --> 01:14:11,440
um

1998
01:14:09,679 --> 01:14:14,480
find an english word

1999
01:14:11,440 --> 01:14:17,280
letter that connects the word must to

2000
01:14:14,480 --> 01:14:19,280
the word vote

2001
01:14:17,280 --> 01:14:21,040
you can think about that i mean i it's

2002
01:14:19,280 --> 01:14:24,159
not that hard to come up with such a

2003
01:14:21,040 --> 01:14:25,600
word ladder uh so i encourage you

2004
01:14:24,159 --> 01:14:28,400
to think about that also to think about

2005
01:14:25,600 --> 01:14:31,120
voting which is also important

2006
01:14:28,400 --> 01:14:31,120
that's coming up

2007
01:14:31,760 --> 01:14:34,080
um

2008
01:14:36,000 --> 01:14:42,280
okay another five seconds here

2009
01:14:39,280 --> 01:14:42,280
um

2010
01:14:43,760 --> 01:14:49,280
okay i'm gonna end this so make sure you

2011
01:14:45,360 --> 01:14:49,280
get your credit for the check-in

2012
01:14:52,080 --> 01:14:56,800
okay so uh we're at the end of the hour

2013
01:14:55,199 --> 01:14:58,640
um

2014
01:14:56,800 --> 01:15:01,199
into the end of the night

2015
01:14:58,640 --> 01:15:02,960
end of the 80 minutes anyway uh so this

2016
01:15:01,199 --> 01:15:04,080
is what we did today

2017
01:15:02,960 --> 01:15:05,120
um

2018
01:15:04,080 --> 01:15:07,520
and

2019
01:15:05,120 --> 01:15:08,719
looks like i ran over by a minute so my

2020
01:15:07,520 --> 01:15:11,199
apologies

2021
01:15:08,719 --> 01:15:12,880
and but i'll stick around here um if any

2022
01:15:11,199 --> 01:15:13,920
of you have any further questions so but

2023
01:15:12,880 --> 01:15:15,840
otherwise

2024
01:15:13,920 --> 01:15:17,360
uh lecture is over

2025
01:15:15,840 --> 01:15:18,719
uh see you guys

2026
01:15:17,360 --> 01:15:20,480
do we know anything about ladder for

2027
01:15:18,719 --> 01:15:22,840
other kinds of languages

2028
01:15:20,480 --> 01:15:25,840
i i don't know

2029
01:15:22,840 --> 01:15:27,920
um uh interesting question whether you

2030
01:15:25,840 --> 01:15:28,880
can say uh some nice things about the

2031
01:15:27,920 --> 01:15:30,800
latter

2032
01:15:28,880 --> 01:15:33,360
um

2033
01:15:30,800 --> 01:15:35,679
the latter um problem in other in other

2034
01:15:33,360 --> 01:15:40,640
cases i don't know

2035
01:15:35,679 --> 01:15:44,239
okay why is t here this value of t

2036
01:15:40,640 --> 01:15:47,520
sigma to the m the maximum length

2037
01:15:44,239 --> 01:15:49,920
of a um of a word letter so what did

2038
01:15:47,520 --> 01:15:52,159
what first of all we have to m maybe i

2039
01:15:49,920 --> 01:15:54,400
should have written this down m is the

2040
01:15:52,159 --> 01:15:56,640
the the length

2041
01:15:54,400 --> 01:15:59,920
of the words

2042
01:15:56,640 --> 01:16:02,560
uh sigma is the alphabet

2043
01:15:59,920 --> 01:16:03,360
of the words

2044
01:16:02,560 --> 01:16:04,880
um

2045
01:16:03,360 --> 01:16:06,960
so the number of possible different

2046
01:16:04,880 --> 01:16:08,560
words is sigma to the m

2047
01:16:06,960 --> 01:16:10,480
these are all possible words that there

2048
01:16:08,560 --> 01:16:12,480
could possibly be

2049
01:16:10,480 --> 01:16:13,520
so uh

2050
01:16:12,480 --> 01:16:15,360
there's no

2051
01:16:13,520 --> 01:16:17,199
reason in a word like

2052
01:16:15,360 --> 01:16:18,640
or ever to repeat the word because you

2053
01:16:17,199 --> 01:16:21,040
can just find a shorter word ladder that

2054
01:16:18,640 --> 01:16:22,400
still does the job of connecting to

2055
01:16:21,040 --> 01:16:24,320
connecting

2056
01:16:22,400 --> 01:16:27,040
a start in the end

2057
01:16:24,320 --> 01:16:29,840
so you can just cut out that middle

2058
01:16:27,040 --> 01:16:31,199
part um the repeated part

2059
01:16:29,840 --> 01:16:32,800
so

2060
01:16:31,199 --> 01:16:35,040
in that case

2061
01:16:32,800 --> 01:16:37,520
the longest possible

2062
01:16:35,040 --> 01:16:38,880
word letter is going to be the total

2063
01:16:37,520 --> 01:16:41,280
number of possible words that you can

2064
01:16:38,880 --> 01:16:43,600
have which is going to be sigma the size

2065
01:16:41,280 --> 01:16:45,920
of sigma to the m

2066
01:16:43,600 --> 01:16:48,719
explain again why cohen p is a subset of

2067
01:16:45,920 --> 01:16:51,040
p space

2068
01:16:48,719 --> 01:16:51,040
um

2069
01:16:51,840 --> 01:16:54,719
well

2070
01:16:52,719 --> 01:16:55,600
maybe i'll say it this way

2071
01:16:54,719 --> 01:16:56,880
take the

2072
01:16:55,600 --> 01:16:59,520
why is

2073
01:16:56,880 --> 01:17:00,480
why is every co np language also in pd

2074
01:16:59,520 --> 01:17:02,560
space

2075
01:17:00,480 --> 01:17:04,960
well take the complement of your co-mp

2076
01:17:02,560 --> 01:17:07,199
language that's an np language

2077
01:17:04,960 --> 01:17:10,000
an np language is in p space because we

2078
01:17:07,199 --> 01:17:11,760
proved that that's what we proved um

2079
01:17:10,000 --> 01:17:13,920
uh

2080
01:17:11,760 --> 01:17:16,239
but if a language is in p space its

2081
01:17:13,920 --> 01:17:18,560
complement is also in p space because

2082
01:17:16,239 --> 01:17:21,120
for a deterministic procedure you can

2083
01:17:18,560 --> 01:17:23,440
just flip the answer of the machine

2084
01:17:21,120 --> 01:17:26,400
um so now you get

2085
01:17:23,440 --> 01:17:29,600
you know if so if b language b is in

2086
01:17:26,400 --> 01:17:32,960
cohen p its complement b b complement is

2087
01:17:29,600 --> 01:17:35,760
an np which is in p space but now so b

2088
01:17:32,960 --> 01:17:37,679
complement is in p space so now

2089
01:17:35,760 --> 01:17:40,880
p space you can invert the answer and

2090
01:17:37,679 --> 01:17:43,040
now b is also in p space i hope that

2091
01:17:40,880 --> 01:17:44,640
helps um

2092
01:17:43,040 --> 01:17:46,320
somebody's giving me the answer to get

2093
01:17:44,640 --> 01:17:49,520
from uh

2094
01:17:46,320 --> 01:17:51,360
uh must to vote but you know i i i've

2095
01:17:49,520 --> 01:17:52,880
seen an answer and that's you know there

2096
01:17:51,360 --> 01:17:55,920
are online tools

2097
01:17:52,880 --> 01:17:57,280
that will answer word letters um

2098
01:17:55,920 --> 01:17:59,280
so you just

2099
01:17:57,280 --> 01:18:01,360
plug in the two you know

2100
01:17:59,280 --> 01:18:03,199
where the start and the finish and it'll

2101
01:18:01,360 --> 01:18:05,199
give you the word ladder and then the

2102
01:18:03,199 --> 01:18:07,199
one that this person is

2103
01:18:05,199 --> 01:18:09,679
sent me is the one you get from that

2104
01:18:07,199 --> 01:18:13,280
that tool so i suspect it didn't find it

2105
01:18:09,679 --> 01:18:15,360
himself i i actually uh before lecture i

2106
01:18:13,280 --> 01:18:16,880
actually saw that on my own besides the

2107
01:18:15,360 --> 01:18:19,600
one that i know the one that the one

2108
01:18:16,880 --> 01:18:23,120
that the tool will give you so that tool

2109
01:18:19,600 --> 01:18:24,960
gives one in uh i think five steps and i

2110
01:18:23,120 --> 01:18:28,400
found one on my own of six steps it's

2111
01:18:24,960 --> 01:18:29,360
not that hard but yeah must

2112
01:18:28,400 --> 01:18:31,280
most

2113
01:18:29,360 --> 01:18:34,400
lost lose

2114
01:18:31,280 --> 01:18:36,480
rose wrote and vote

2115
01:18:34,400 --> 01:18:37,440
i think maybe that's seven steps

2116
01:18:36,480 --> 01:18:40,080
um

2117
01:18:37,440 --> 01:18:41,280
anyway you see you can solve the for

2118
01:18:40,080 --> 01:18:43,520
short words you can solve these

2119
01:18:41,280 --> 01:18:45,120
generally pretty quickly on your own

2120
01:18:43,520 --> 01:18:47,679
um

2121
01:18:45,120 --> 01:18:49,920
what else what else can i do for you

2122
01:18:47,679 --> 01:18:49,920
um

2123
01:18:52,400 --> 01:18:57,840
do we need to worry about coming back to

2124
01:18:54,719 --> 01:19:00,480
a previously visited word visited word

2125
01:18:57,840 --> 01:19:01,920
on the construction on this page

2126
01:19:00,480 --> 01:19:04,159
no we don't have to worry about coming

2127
01:19:01,920 --> 01:19:05,760
back to a previously visited word all

2128
01:19:04,159 --> 01:19:08,000
you need to worry about is making sure

2129
01:19:05,760 --> 01:19:09,520
that you bound how long you're going to

2130
01:19:08,000 --> 01:19:11,760
go for

2131
01:19:09,520 --> 01:19:12,960
and that's where the previously visited

2132
01:19:11,760 --> 01:19:15,520
issue

2133
01:19:12,960 --> 01:19:17,600
comes in

2134
01:19:15,520 --> 01:19:17,900
you know if the

2135
01:19:17,600 --> 01:19:19,440
um

2136
01:19:17,900 --> 01:19:22,320
[Music]

2137
01:19:19,440 --> 01:19:24,560
if the word letter that you found

2138
01:19:22,320 --> 01:19:25,920
repeats some word

2139
01:19:24,560 --> 01:19:27,600
well then there would would have been a

2140
01:19:25,920 --> 01:19:29,840
shorter word ladder that would have also

2141
01:19:27,600 --> 01:19:31,679
worked but uh

2142
01:19:29,840 --> 01:19:34,159
you know it still shows that it's

2143
01:19:31,679 --> 01:19:35,120
possible to get from the

2144
01:19:34,159 --> 01:19:38,480
uh

2145
01:19:35,120 --> 01:19:40,159
the start word to the finish word um

2146
01:19:38,480 --> 01:19:41,760
if you if you're if you have a repeated

2147
01:19:40,159 --> 01:19:42,800
one in between so that that doesn't

2148
01:19:41,760 --> 01:19:44,640
matter

2149
01:19:42,800 --> 01:19:47,040
we don't have to worry about that

2150
01:19:44,640 --> 01:19:49,040
if you did then it would be a problem

2151
01:19:47,040 --> 01:19:51,280
so i think i will it's four or five i

2152
01:19:49,040 --> 01:19:53,440
think i want to head out uh

2153
01:19:51,280 --> 01:19:55,679
see you all guys and i'm going to join

2154
01:19:53,440 --> 01:19:59,560
my tas in the meeting shortly so bye-bye

2155
01:19:55,679 --> 01:19:59,560
thank you for being here

2156
01:20:09,199 --> 01:20:11,280
you

